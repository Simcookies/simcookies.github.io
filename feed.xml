<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simcookies</title>
    <description>All about Simcookies Project.</description>
    <link>https://simcookies.github.io/</link>
    <atom:link href="https://simcookies.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Sep 2018 20:59:04 +0900</pubDate>
    <lastBuildDate>Thu, 20 Sep 2018 20:59:04 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Draw UML with PlantUML in Atom</title>
        <description>&lt;p&gt;I want to use UML to help me understanding how Jekyll works, so I found &lt;a href=&quot;http://plantuml.com/&quot;&gt;PlantUML&lt;/a&gt;. It’s an open source tool which can draw UML pictures quickly. In this post, I will config PlantUML into &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;install-atom&quot;&gt;Install Atom&lt;/h1&gt;
&lt;p&gt;Just download the Atom and install it.&lt;/p&gt;

&lt;h1 id=&quot;install-java&quot;&gt;Install Java&lt;/h1&gt;
&lt;p&gt;Java runtime environment is necessary because PlantUML is written in Java. Check if Java is installed in your PC or *nix by &lt;code class=&quot;highlighter-rouge&quot;&gt;java --version&lt;/code&gt;. If Java is installed, it will return messages like:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java 9.0.1
Java&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 9.0.1+11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 9.0.1+11, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;install-graphviz&quot;&gt;Install graphviz&lt;/h1&gt;
&lt;p&gt;Graphviz is a package of open-source tools for drawing graphs with &lt;strong&gt;dot language&lt;/strong&gt; script. It is used by PlantUML to draw UML graphs. In Mac, you can install it by brew.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install graphviz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can type &lt;code class=&quot;highlighter-rouge&quot;&gt;dot -V&lt;/code&gt; in the bash command line to check if it was installed successfully.&lt;/p&gt;

&lt;h1 id=&quot;check-installation-of-java-and-graphviz&quot;&gt;Check installation of Java and graphviz&lt;/h1&gt;
&lt;p&gt;Official site provide a way to check if the environment of PlantUML is ready or not. First download &lt;a href=&quot;https://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar&quot;&gt;plantuml.jar&lt;/a&gt; and then type &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar plantuml.jar -testdot&lt;/code&gt;. If each installation is OK, it will say: &lt;code class=&quot;highlighter-rouge&quot;&gt;Installation seems OK. File genration OK.&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;install-plugins-of-atom&quot;&gt;Install plugins of Atom&lt;/h1&gt;
&lt;p&gt;There are two plugins necessary for using PlantUML in Atom.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;languange-plantuml&lt;/li&gt;
  &lt;li&gt;plantuml-preview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/language-plantuml&quot;&gt;Language-plantuml&lt;/a&gt; provide syntax highlight or autocomplete.
&lt;a href=&quot;https://atom.io/packages/plantuml-preview&quot;&gt;plantuml-preview&lt;/a&gt; will create UML diagrams and display it. It also updates on save.
You can install these two packages with &lt;code class=&quot;highlighter-rouge&quot;&gt;apm&lt;/code&gt; or directly install them in Atom GUI.&lt;/p&gt;

&lt;p&gt;After installation, plantuml-preview needs some configurations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/setting_of_plantuml.png&quot; alt=&quot;setting_of_plantuml&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Graphviz Dot Executable&lt;/strong&gt;: The path of dot which you get it by &lt;code class=&quot;highlighter-rouge&quot;&gt;which dot&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Additional PlantUML Arguments&lt;/strong&gt;: It’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-jar&lt;/code&gt; with default value.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PlantUML Jar&lt;/strong&gt;: The file you have downloaded before, and put it at some where.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java Executable&lt;/strong&gt;: Default is &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; if you can run java in command line directly. If not, use &lt;code class=&quot;highlighter-rouge&quot;&gt;which java&lt;/code&gt; to find the path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;write-plantuml-code&quot;&gt;Write PlantUML code&lt;/h1&gt;
&lt;p&gt;Congrulations! We have done all the preparation, and now we can write PlantUML code at Atom. The extension can be &lt;code class=&quot;highlighter-rouge&quot;&gt;.pu&lt;/code&gt;. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@startuml
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
@enduml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The shortcut key &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Option + p&lt;/code&gt; can preview the UML diagrams.
&lt;img src=&quot;/public/image/demo_of_plantuml_in_atom.png&quot; alt=&quot;demo_of_plantuml_in_atom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK! It’s done! Enjoy it~ :tada:&lt;/p&gt;

</description>
        <pubDate>Sat, 05 May 2018 14:23:16 +0900</pubDate>
        <link>https://simcookies.github.io/2018/05/05/draw-uml-with-plantuml-in-atom</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/05/05/draw-uml-with-plantuml-in-atom</guid>
        
        <category>plantUML</category>
        
        <category>atom</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Source code reading of Jekyll -- 1</title>
        <description>&lt;p&gt;It has been long time since I wanted to study Ruby by reading source code of some project from some open source project. I choosed the Jekyll because it’s small and popular in static pages generator. It is my first time to read source codes, I will choose the appropriate way for me. It you have any advices for me, please feel free to reply this article.&lt;/p&gt;

&lt;p&gt;I plan to begin from files at root dir, and then go on directories. Finally, return root dir and make a summary of this project.&lt;/p&gt;

&lt;h1 id=&quot;jeykllgemspec&quot;&gt;jeykll.gemspec&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gemspec&lt;/code&gt; includes basic infos of the Jekyll project. It is necessary in a RubyGem project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/version&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Load the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; dir into built-in var &lt;code class=&quot;highlighter-rouge&quot;&gt;$LOAD_PATH&lt;/code&gt; and require &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/version.rb&lt;/code&gt; which includes version info of Jekyll. &lt;code class=&quot;highlighter-rouge&quot;&gt;File.expand_path&lt;/code&gt; converts a pathname to an absolute pathname. &lt;code class=&quot;highlighter-rouge&quot;&gt;unshift&lt;/code&gt; can prepend objects to the front of self.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;all_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git ls-files -z`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_runtime_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;addressable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 2.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use ` ` to execute a shell script, the script here can get all files under the management of git.
&lt;code class=&quot;highlighter-rouge&quot;&gt;s.bindir = &quot;exe&quot;&lt;/code&gt; specify the executable ruby script in &lt;code class=&quot;highlighter-rouge&quot;&gt;exe/&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;add_runtime_dependency&lt;/code&gt; adds a runtime dependency named gem with requirements to this gem.&lt;/p&gt;

&lt;p&gt;We can install Jekyll by &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;, and gem will create a exculatable ruby script in &lt;code class=&quot;highlighter-rouge&quot;&gt;gems/ruby-2.X.X/bin&lt;/code&gt;. Implement in console of &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;exe/jekyll&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exejekyll&quot;&gt;exe/jekyll&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Execulatable ruby script which defined in jekyll.gemspec.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Normally &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; does not write immediately to &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, but this can write every single character immediately to the console&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is very useful when build websocket server.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PluginManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require_from_bundler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Call the &lt;code class=&quot;highlighter-rouge&quot;&gt;require_from_bundler&lt;/code&gt; method which defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/plugin_manager.rb&lt;/code&gt;. In fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;jekyll&quot;&lt;/code&gt; will load jekyll.rb file, and all other modules are loaded in this file by &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload :XXX, &quot;jekyll/xxx&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deprecator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This method will deal with arguments deprecated which defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/deprecator.rb&lt;/code&gt;. It will show the error messages and abort calling.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mercenary&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mercenary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/mercenary&quot;&gt;Mercenary&lt;/a&gt; is lightweight and flexible library for writing command-line apps in Ruby which is also a sub-repo of Jekyll. This gem may be useful in development of gem.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subclasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init_with_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Initilization of Jekyll commands in block of Mercenary. These commands are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/command.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll.logger&lt;/code&gt; is using to manage logs.&lt;/p&gt;

&lt;h1 id=&quot;libjekyllrb&quot;&gt;lib/jekyll.rb&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Require necessary libs to this project in lib/jekyll.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As it said of comment, this method requires all of the Ruby files in the given directory.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# internal requires&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Cleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/cleaner&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# extensions&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/plugin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll.rb&lt;/code&gt; requires &lt;code class=&quot;highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;, stdlib and 3rd party libs firstly. Also it will claim its own modules using &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; opens up &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;’s singleton class, so that methods can be redefined for the current &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; object. With this syntax, we don’t need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;def self.some_method&lt;/code&gt; in the module everytime.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There are such a set of methods defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# jekyll environment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# configuration Hash by merging the default options with anything in _config.yml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_timezone&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Set the TZ environment variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# logger instance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# set logger writer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sites&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# Jekyll sites created&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sanitized_path&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Returns the sanitized path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Stackoverflow: &lt;a href=&quot;https://stackoverflow.com/questions/29998728/what-stdout-sync-true-means&quot;&gt;What STDOUT.sync = true means?&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;About the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;, reference is &lt;a href=&quot;https://stackoverflow.com/questions/804297/when-to-use-require-load-or-autoload-in-rubyutm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;here&lt;/a&gt;. And I plan to write an another article about this. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Stackoverflow: &lt;a href=&quot;https://stackoverflow.com/questions/2505067/class-self-idiom-in-rubyutm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;class « self idiom in Ruby&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 15:27:12 +0900</pubDate>
        <link>https://simcookies.github.io/2018/04/04/source-code-reading-of-jekyll-1</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/04/04/source-code-reading-of-jekyll-1</guid>
        
        <category>source</category>
        
        <category>jekyll</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>'Web Full-stack develop reference'</title>
        <description>&lt;p&gt;I finished reading the book of &lt;em&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web Full-stack Develop Reference&lt;/a&gt;&lt;/em&gt; at one weekend&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. As writing in the book, it focuses on the principles, general methods and tools of Web developing, not a specific programming language. The first half of the book’s content is mainly introduced the basic knowledge of the Web includes the three elements of the web page elements – HTML, CSS, JavaScript, so I just looked through it. I focused on reading the third chapter – Programming Languages and Technologies. Besides, I made some others related researches about it and write a new post as below. (It’s terriable to write in English:joy:)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dynamic-content-some-ways-for-server-programming&quot;&gt;(Dynamic content) Some ways for Server Programming&lt;/h1&gt;

&lt;h2 id=&quot;common-gateway-interface-cgi&quot;&gt;Common Gateway Interface, CGI&lt;/h2&gt;

&lt;p&gt;Although no one is using it today basically, the mainstream Web server still supports it. Here are the processing steps of it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User’s requests are sent to the server through the Internet.&lt;/li&gt;
  &lt;li&gt;The server sends the received request to the CGI program for processing.&lt;/li&gt;
  &lt;li&gt;CGI program passes the results to the server.&lt;/li&gt;
  &lt;li&gt;The server sends the responses to users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While CGI handles one process for per request, so CGI is not a good choice for lots of requests that consume a lot of resources.&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h2 id=&quot;java-servlet&quot;&gt;Java (Servlet)&lt;/h2&gt;

&lt;p&gt;Java Servlet just provides servers for Java. Here is it’s processing steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User’s requests are sent to the server through the Internet.&lt;/li&gt;
  &lt;li&gt;The server starts and calls Servlet.&lt;/li&gt;
  &lt;li&gt;Servlet processes according to user’s requests and passes the results to the server.&lt;/li&gt;
  &lt;li&gt;The server sends the responses to users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Java Servlet handles one thread for per request which is different from CGI, so it has better performance than CGI (If you want to know more about this, please read this &lt;a href=&quot;http://www.c4learn.com/java/servlet/servlet-vs-cgi/&quot;&gt;reference&lt;/a&gt;. In fact, we use more frameworks such as &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; instead of using Java Servlet directly.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Python mainly depends on the WSGI (Web Server Gateway Interface) specification on the server side. This specification defines the main interface between the server and the application.&lt;/p&gt;

&lt;p&gt;There is a Middleware concept in WSGI: after the server receives the request, the middleware responds firstly, and then send to the next level which may be an application or another middleware. Simply say, it adds one or more middlewares which can achieve log or handle errors between the server and the application.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;Ruby is the programming language which I am always using. Rack specification defines the interface between the server and the Ruby application which is similar to WSGI in Python. I never heard about Rack even I am using Ruby on Rails (it is based on Rack :cold_sweat:). As WSGI in Python, Rack also has the concept of middleware.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;nodejs&quot;&gt;Node.js&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;server-architecture&quot;&gt;Server architecture&lt;/h1&gt;

&lt;p&gt;I was vague about this concept before, but I got a rough outline after reading the book. I will sort out various concepts includes well known Apache, Nginx or IIS.&lt;/p&gt;

&lt;h2 id=&quot;basic-situation&quot;&gt;Basic situation&lt;/h2&gt;

&lt;p&gt;If the site’s traffic is not a lot, we can put the server directly on the network. Here is an instance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/basic_web_server.png&quot; alt=&quot;basic instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web server here may be Apache HTTP Server, Nginx, Microsoft’s IIS and so on; dedicated Servlet which I said above, it just provides servers for Java; and the web server embedded in Node.js.&lt;/p&gt;

&lt;h2 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h2&gt;

&lt;p&gt;In general, one Web Server for one website is not enough, we need a group of servers. The load balancer accepts the HTTP request and distributes it to the internal web server. There is a well-known load balancer named &lt;a href=&quot;https://en.wikipedia.org/wiki/HAProxy&quot;&gt;HAProxy&lt;/a&gt;, the Apache, Nginx which I said above can also act as a load balancer.&lt;/p&gt;

&lt;h2 id=&quot;specifi-analysis&quot;&gt;Specifi analysis&lt;/h2&gt;

&lt;p&gt;I often hear the Web Server Architecture composed of Nginx + Passenger + Ruby on Rails or Apache + Unicorn + Ruby on Rails, here are the details explanations for each link:&lt;/p&gt;

&lt;p&gt;Nginx or Apache is the load balancer and also the web server, which responds to client requests and sends them to the application. Unicorn is an HTTP server for Ruby. It will load the Ruby application in its own process space, and the package HTTP contents outside and communicate with Ruby application. Unicorn is easy to debug, and it’s applied to manage Rack application. Some other server such to Thin, Puma is similar as Unicorn. And Passenger is a bit special, it’s directly integrated into Nginx and Apache and becomes the module which they can use directly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From Wikipedia
Phusion Passenger (informally also known as mod_rails and mod_rack among the Ruby community) is a free web server and application server with support for Ruby, Python and Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Passenger can also manage the number of Rails processes, life cycles, request queues and so on. This fig can help you to understand the relationship between them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/server_analysis.png&quot; alt=&quot;server analysis&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;refferences&quot;&gt;Refferences&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://fujiike.hateblo.jp/entry/2015/08/20/170751&quot;&gt;ApacheとNginxとPassengerとUnicornの違い【すごい初心者向け】&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options&quot;&gt;Ruby on Rails Server options&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web全栈技术指南&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Strictly speaking, it is only the author’s own summary of the Gitbook. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I am not very understanding for PHP, after all, I am an ‘entery level’ player. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;I want to write an another post to introduce WSGI and Rack. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Still in studying process, I may write a new post about it after it~ &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 02 Dec 2017 15:49:44 +0900</pubDate>
        <link>https://simcookies.github.io/2017/12/02/fullstack-reference</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/12/02/fullstack-reference</guid>
        
        <category>ruby</category>
        
        <category>python</category>
        
        <category>server</category>
        
        
        <category>basic</category>
        
      </item>
    
      <item>
        <title>Rails error of 'key must be 32 bytes'</title>
        <description>&lt;p&gt;I made a Rails Application with Rails 5.0.0.1, and got an strange error when I run the server by localhost.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ArgumentError in WelcomeController#index
	key must be 32 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And details are here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Extracted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#72):&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cipher&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@secret&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Rely on OpenSSL for the initialization vector&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_iv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It seems the version of the Rails need to be update. So I changed Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;# gem 'rails', '5.0.0.1' =&amp;gt; '5.0.1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; to update the gems. The error will be gone.&lt;/p&gt;

&lt;p&gt;Some people said they sitll got the error after they change the Gemfile. It’s a better way to update Ruby version too. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25185&quot;&gt;refference is here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 15:49:44 +0900</pubDate>
        <link>https://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>solution</category>
        
      </item>
    
      <item>
        <title>Insert Math into post with MathJax</title>
        <description>&lt;p&gt;Sometimes we may need to insert math equation into posts. &lt;a href=&quot;https://www.mathjax.org/#about&quot;&gt;MathJax&lt;/a&gt; can help us to do this. We can write LaTeX-like equations in posts with MathJax. And it’s also easy to config into Jekyll.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;add-script-tag-into-html-head&quot;&gt;Add script tag into HTML head.&lt;/h2&gt;

&lt;p&gt;Add the script below into every page (or add it into template page “default.html”):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-redcarpet-or-karmdown-as-markdown-compiler&quot;&gt;Use redcarpet or karmdown as Markdown compiler&lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Set it in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;markdwon: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kramdown&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or redcarpet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-latex-like-code&quot;&gt;Use LaTeX-like code&lt;/h2&gt;

&lt;p&gt;MathJax use &lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \\)&lt;/code&gt; for inline math and &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[ \\]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$$ $$&lt;/code&gt; for displayed math. For instance:&lt;/p&gt;

&lt;div class=&quot;language-latex highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; E &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; mc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can get:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=mc^2&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \alpha\times\beta\times\gamma \\)&lt;/code&gt; can get \(\alpha\times\beta\times\gamma\)&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;Because some strange things will happen when you use default Markdown compiler. &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Nov 2017 19:50:32 +0900</pubDate>
        <link>https://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</guid>
        
        <category>jekyll</category>
        
        <category>latex</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using BasicTex on OSX Terminal</title>
        <description>&lt;p&gt;MacTeX is a great GUI Application for Latex Distribution. But it is too big with 2.8GB which make me can not accept it. Luckly MacText also provides a smaller distribution named BaiscTeX. I wrote this blog to take notes of installing BasicTeX and subsequent steps. The goal is to write and compile tex file in Emacs.&lt;/p&gt;

&lt;h1 id=&quot;installing-basictex&quot;&gt;Installing BasicTeX&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Download &amp;amp; install &lt;a href=&quot;http://www.tug.org/mactex/morepackages.html&quot;&gt;BasicTeX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &amp;amp; install &lt;a href=&quot;http://amaxwell.github.io/tlutility/&quot;&gt;TeX Live Utility&lt;/a&gt;: TeX Live Utility is a GUI App for management of updating, install and otherwis managing TeX Live.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After these two steps, latex can be used correctly. &lt;code class=&quot;highlighter-rouge&quot;&gt;latex xxx.tex&lt;/code&gt; to compile tex file to dvi file. &lt;code class=&quot;highlighter-rouge&quot;&gt;dvipdfmx&lt;/code&gt; to make dvi file to pdf file. However, it just can be useful for english writting, if you want to write for Chinese or Japanese, it needs other configurations.&lt;/p&gt;

&lt;h2 id=&quot;install-platex&quot;&gt;Install platex&lt;/h2&gt;

&lt;p&gt;Use Tex Live Utility can install different compilers include &lt;code class=&quot;highlighter-rouge&quot;&gt;platex&lt;/code&gt; or some font packages.&lt;/p&gt;

&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;Solutions of some errors.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“jsartile” can not be found: Tex Live Utility(TLU) install “jsclasses”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘newpxtext.sty’ not found.: TLU install “newpx”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘fontaxes.sty’ not found.: TLU install “fontaxes”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘newtxmath.sty’ not found.: TLU install “newtx”;&lt;/li&gt;
  &lt;li&gt;Here is a big error when output dvi to pdf:
    &lt;blockquote&gt;
      &lt;p&gt;kpathsea: Running mktexpk –mfmode / –bdpi 600 –mag 1+0/600 –dpi 600 qtmr.pfb
mktexpk: don’t know how to create bitmap font for qtmr.pfb.
mktexpk: perhaps qtmr.pfb is missing from the map file.
kpathsea: Appending font creation commands to missfont.log.&lt;/p&gt;

      &lt;p&gt;dvipdfmx:warning : Could not locate a virtual/physical font for TFM “ntx-Regular-tlf-t1”.
dvipdfmx:warning : » This font is mapped to a physical font “qtmr.pfb”.
dvipdfmx:warning : » Please check if kpathsea library can find this font: qtmr.pfb
dvipdfmx:fatal: Cannot proceed without .vf or “physical” font for PDF output…&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;TLU to install &lt;code class=&quot;highlighter-rouge&quot;&gt;kastrup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tex-gyre&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When transfer dvi to pdf with dvipdfmx, it said: Could not locate a virtual/physical font for TFM “rml” (or “gbm” here).: Find file of /usr/local/texlive/2017basic/texmf-config/dvipdfmx/dvipdfmx.cfg, and uncomment “cid-x.map”. After that, make &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mktexlsr&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;dvipdfmx can load cid-x.map, but it said: dvipdfmx:fatal: Could not find encoding file “H”. : Tex Live Utility installed “adobemapping”.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 18 Oct 2017 00:00:00 +0900</pubDate>
        <link>https://simcookies.github.io/2017/10/18/using-basictex-on-osx-terminal</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/10/18/using-basictex-on-osx-terminal</guid>
        
        <category>latex</category>
        
        <category>OXS</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Network Studying Note 2</title>
        <description>&lt;p&gt;In the post of &lt;a href=&quot;/2017/03/19/network_studying_note_1&quot;&gt;Network Studying Note 1&lt;/a&gt;, I took notes about the history of Internet and Internet Protocol Suite, especially, the TCP/IP Protocol. TCP/IP contains four layers of Application, Transport, Network and Network Interface. During transmission from layer to layer, top-down is called &lt;strong&gt;Encapsulation&lt;/strong&gt; and button-up is called &lt;strong&gt;Decapsulation&lt;/strong&gt;. In this post, I will write about the Encapsulations of last three layers and also includes about Three-way-Handshake.&lt;/p&gt;

&lt;p&gt;In order to transport network data, the application will send data to transport layer with some header data. The Application is just responsible for processing data logically and regardless of the transmission of it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;transport-layer&quot;&gt;Transport Layer&lt;/h1&gt;

&lt;p&gt;TCP Segment &amp;amp; UDP Segment&lt;/p&gt;

&lt;p&gt;The best-known transport protocol of TCP/IP is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;Transmission Control Protocol (TCP)&lt;/a&gt;. It is used for connection-oriented transmissions, whereas the connectionless &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;User Datagram Protocol (UDP)&lt;/a&gt; is used for simpler messaging transmissions. TCP is the more complex protocol, due to its stateful design incorporating reliable transmission and data stream services.&lt;/p&gt;

&lt;h2 id=&quot;tcp&quot;&gt;TCP&lt;/h2&gt;

&lt;p&gt;TCP provides reliable, ordered, and error-checked delivery of a stream of octets between applications running on hosts communicating over an IP network. Major Internet applications such as the WWW, email, remote administration, and file transfer rely on TCP. This picture shows the segment structure of TCP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tcp_segment.png&quot; alt=&quot;tcp_segment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most used bits are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Source port&lt;/strong&gt; (16 bits): Identifies the sending port. Every server or client has 0 ~ 65535 port, and different ports are corresponding to different services. The most used ports:&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Port Number&lt;/th&gt;
      &lt;th&gt;Server&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;20 or 21&lt;/td&gt;
      &lt;td&gt;FTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;Telent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;SMTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;110&lt;/td&gt;
      &lt;td&gt;POP3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;443&lt;/td&gt;
      &lt;td&gt;HTTPS&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Destination port&lt;/strong&gt; (16 bits): Identifies the receiving port&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;

&lt;p&gt;UDP provides checksums for data integrity and port numbers for addressing different functions at the source and destination of the datagram. UDP is different with TCP without having no handshaking dialogues. This picture shows the segment structure of UDP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/udp_segment.png&quot; alt=&quot;udp_segment&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;handshaking&quot;&gt;Handshaking&lt;/h2&gt;

&lt;p&gt;TCP pays more attention to security, instead, UDP pays more attention to effectiveness. Three times handshaking was introduced into TCP for security with a set of SYN, SYN-ACK, ACK signals. As my understanding, it sounds like that a communication in a classroom. A teacher wants to communicate with a student.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firstly, he calls his name and asks him is listening or not, the first handshaking.&lt;/li&gt;
  &lt;li&gt;Secondly, the student answers Yes and asks teacher is still there or not, the second handshaking.&lt;/li&gt;
  &lt;li&gt;Finally, the teacher makes sure and says “I will communicate with you from now” to begin this communication, the third handshaking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After three times handshaking, the safe communication can be established. If the student is not there or after the student said “I’m here” but the teacher was gone, the communication cannot be established. By the way, if the teacher was gone after the first handshaking, the student will always wait for him and try to connect with the teacher after a period of time until the teacher answers or “his death”.
This is one way of &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;DoS Attack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, UDP has no handshaking. The teacher just says what he wants to say regardless of the student’s attendance. So UDP has better effectiveness.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;encapsulation&quot;&gt;Encapsulation&lt;/h1&gt;

&lt;p&gt;How to transmit data with four layers? For UDP, the data of Application will be sent to Transport layer, and it adds UDP header in the front of data and sends to next Internet layer. Internet layer will add IP header in the front of that data and send to Data Link layer. Data Link layer add a Frame header in the front of data and add Frame footer in the behind of data. Finally, it sends the frame by physical signals. Here is the picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/encapsulation.png&quot; alt=&quot;encapsulation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decapsulation has opposite steps of encapsulation.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0900</pubDate>
        <link>https://simcookies.github.io/2017/10/16/network-studying-note-2</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/10/16/network-studying-note-2</guid>
        
        <category>internet</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Network Studying Note 1</title>
        <description>&lt;p&gt;There are some basic pieces of knowledge for programmers, C, Data Structure and Algorithm, Network, Operation System. So it’s time to learning about them deeply. This blog is about my learning note of Network. It includes the history of Internet, theory, and application in Linux. If I want to know a new technology, I will first be interested in its history. Knowing the history of some tech will help me to understand why this tech is necessary and why it’s fixtures work like this. So let me begin with history.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;history-of-internet&quot;&gt;History of Internet&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Development Stage&lt;/th&gt;
      &lt;th&gt;History&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concept was born&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;In order to make computer cooperate with other devices(etc. Printer, Fax), we need to connect them physically with communication devices and lines. Here comes the concept of Network.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Independent Technology&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Since we have the concept of Network, during 70th and 80th at 20 century, many companies began to develop their own communication technology which just can be used for their own devices, include the software and hardware. And the most famous are Xerox and IBM. (Well, maybe you know the Xerox is the company which developed windows-based GUI and Mouse but did not commercialize them. Finally, Apple and Microsoft found business opportunities.) &lt;br /&gt;&lt;br /&gt;Xerox developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt;, and IBM developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Token_ring&quot;&gt;Token-Ring&lt;/a&gt;. They were quite fine at that moment, but the question is, the different company has different devices, and they can not talk with each other. For the formal users, it seems they still can not use Network if they use devices from the different company.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Integration with Protocol&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Advanced Research Project Agency, which knew as ARPA of U.S.A, was also focusing on the development project of net communication. At 1967, they put forward the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/ARPANET&quot;&gt;ARPANET&lt;/a&gt; and put in into operation at the end of 1969. Different from other net technology, ARPANET introduced Network Control Protocol (NCP) as the communications protocol and provided a standard method to establish reliable communications among different computers and other devices. &lt;br /&gt;&lt;br /&gt;However, even it tried to make everything connected together, ARPANET still can not communicate with few important devices, especially, SAT-NET and ALOHA NET. So developer made a new protocol which named Transmission Control Protocol and Internet Protocol (TCP/IP) and knew by everyone. The new protocol made ARPANET connected with other devices. &lt;br /&gt;&lt;br /&gt;ARPANET was transferred to Defense Department Communicationg Agence of U.S.A at 1975. After that, many new networks were created at the base of ARPANET, like Computer Science Research Network (CSRNET), Canadian Network (CDNET), Because It’s Time Network (BITNET), National Science Foundation Network (NSFNET) and so on. TCP/IP protocols replaced NCP as the ARPANET’s principal protocol, even it was written as a part of BSD Unix. During the development of the different network, NSFNET became core between universities and ARPANET was closed at 1989 finally.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Open to Public&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The creation of &lt;a href=&quot;https://en.wikipedia.org/wiki/National_Science_Foundation_Network&quot;&gt;NSFET&lt;/a&gt; is a very important flag of the Internet development. It turned into commercial operation at 1994, and after that, Internet was open to the public.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The history of Internet shows the importance of the &lt;strong&gt;standard&lt;/strong&gt;. Only with the protocol, the different devices can connect with each other. The Application can focus on data processing instead of data transmission. So I will go on the blog with some protocols.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;internet-protocol-suite-ips&quot;&gt;Internet Protocol Suite (IPS)&lt;/h1&gt;

&lt;h2 id=&quot;osi-model&quot;&gt;OSI Model&lt;/h2&gt;

&lt;p&gt;Open Systems Interconnection model (&lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;OSI model&lt;/a&gt;) partitions a communication system into 7 abstraction layers. And here is the structure and composition of 7 layers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layers&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Protocol data unit&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7.Application&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;High-level APIs, including resource sharing, remote file access&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.Presentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Translation of data between a networking service and an application; including character encoding, data compression and encryption/decryption&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5.Session&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Managing communication sessions, i.e. continuous exchange of information in the form of multiple back-and-forth transmissions between two nodes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4.Transport&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Segment(TCP)/Datagram(IP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data segments between points on a network, including segmentation, acknowledgement and multiplexing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.Network&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Packet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Structuring and managing a multi-node network, including addressing, routing and traffic control&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.Data link&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data frames between two nodes connected by a physical layer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.Physical&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Transmission and reception of raw bit streams over a physical medium&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The higher layer will package its data with a header at beginning of itself, and then send the package to next layer. This operation will be repeated and host device sends packaged data by physical line finally:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/osi_layers.gif&quot; alt=&quot;OSI model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OSI model does not provide some methods which can be realized, just gives some concepts. So it is not a standard but a concept framework which can be referred when createing a new standard. TCP/IP is such an instance.&lt;/p&gt;

&lt;h2 id=&quot;tcpip-model&quot;&gt;TCP/IP model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot;&gt;TCP/IP&lt;/a&gt; is a quite successful protocol, so it was used to replace NCP in ARPANET. There are two reasons. First, it is easier than OSI model because it just has four layers. Second, it can support so many protocols at low layers (Physical layer and Data link layer in OSI model), include Ethernet, Token-Ring, FDDI, PPP, ATM and so on. We can think TCP/IP model is an easier version of OSI model. Here is their relationship and the most used protocols and servers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tcp_ip_structure.png&quot; alt=&quot;TCP/IP protocol suite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we know, TCP/IP is most used in fact. Just like OSI model, communication just exists between the same layer, higher will make header or footer to the data package and send it to the lower layer. The receiver host will make inverse operations to get final data. Understanding about these processes is important, and then it’s time to understand every layer, but this post is just until here. I will go on with a new one. &amp;gt;= =&amp;lt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Wiki&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;obj=page&amp;amp;pageid=142&quot;&gt;Linux tutorial about TCP/IP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://cn.linux.vbird.org/linux_server/&quot;&gt;Linux鸟哥的私房菜（服务器篇）&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://simcookies.github.io/2017/03/19/network_studying_note_1</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/03/19/network_studying_note_1</guid>
        
        <category>internet</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Virtual Environment for Python</title>
        <description>&lt;p&gt;As a student, I need to deal with a lot of experiment data and have to make mess data to porcelain figures. &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt; seems a good idea, but you know, we can not pay for it. Naturally, I chose &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. Python has two famous stable version–2.7 and 3.5. But unfortunately, they can not compatible with each other. For scientific computing, it’s better to use 2.7 because lots of modules only support 2.7. But there is a trend to use high version finally.&lt;/p&gt;

&lt;p&gt;For example, I am using 2.7 to learn &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, using 3.5 to learn &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;. The Mac or GNU/Linux also has the default version of Python. Finally, there will be three different versions of Python and at least two versions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Pip_(package_manager)&quot;&gt;pip&lt;/a&gt;. It will be very troublesome to deal with such a mess. Sometimes, I forget which version I am using. And the other reason I feel uncomfortable is I have to install module twice on my Mac which just used for one time.&lt;/p&gt;

&lt;p&gt;For this state, virtualenv is a good choice for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them. It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;installing--basic&quot;&gt;Installing &amp;amp; Basic&lt;/h1&gt;

&lt;p&gt;Installing is very easy, we can install virtualenv via pip:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing, we can check installed modules list via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt;. We can install all the modules in virtualenv, so the modules except virtualenv can be uninstalled via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip uninstall one_package&lt;/code&gt;. OK, it’s time to use virtualenv now!&lt;/p&gt;

&lt;p&gt;Enter your project folder, make a new virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will make a new folder named venv in the current directory. (As a convention, we use venv.) This venv folder contains Python executable files and pip library where you can install modules(Of cause, except virtualenv). The Python executable files will use the version which you use to install virtualenv defaultly. For example, you install virtualenv via pip3 which represent of python3, so the Python excutable files of venv will be python3 too. However, you can change this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv -p /usr/bin/python2.7 venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, it’s time to activate the virtual environment via &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/active
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then the name of virtual environment will appear on the left of prompt, like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; username@computer: ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From now, we can use the environment isolated from the global environment because the modules which we install will be installed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt;. You can leave this virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;management-of-packages&quot;&gt;Management of packages&lt;/h1&gt;

&lt;p&gt;In order to keep your environment consistent, it’s a good idea to “freeze” the current state of the environment packages:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command can create a list file of packages which you installed via pip. This can file can be reused for other environment or by your collaborators. This can help ensure consistency across installations, across deployments, and across developers. They can install necessary packages with the file:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip install -r requirements.txt 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In fact, this is a little similar to &lt;a href=&quot;http://bundler.io/gemfile.html&quot;&gt;Gemfile&lt;/a&gt; which used in Ruby bundle.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Offical Python page: &lt;a href=&quot;https://www.python.org/&quot;&gt;https://www.python.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Guide to Python: &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;http://docs.python-guide.org/en/latest/dev/virtualenvs/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Python Package Index: &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;https://pypi.python.org/pypi/pip&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 13:07:57 +0900</pubDate>
        <link>https://simcookies.github.io/2017/01/02/virtual-environment-for-python</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/01/02/virtual-environment-for-python</guid>
        
        <category>python</category>
        
        <category>environment</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Class Method V.S Scope</title>
        <description>&lt;p&gt;In this post, I want to write something about Class Mehotd and Scope. Firstly, let’s look some Rails code in Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;give-problems&quot;&gt;Give Problems&lt;/h1&gt;

&lt;p&gt;For MVC framework, of course, there are some problems with this code.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It &lt;strong&gt;exposes implementation details&lt;/strong&gt;. In fact, we should not see the details about data in Controller, logic should be put into Model.&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;produces unnecessary duplication&lt;/strong&gt;. This code may be used in other places, so we should be DRY(Don’t Repeat Yourself).&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;complicates writing tests&lt;/strong&gt;. If you write this code in Controller, it will be necessary to write test for Controller, but this is not what we want. We want to just write unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;p&gt;Here are two solutions to fix these problems:&lt;/p&gt;

&lt;p&gt;Put query into Model as a &lt;strong&gt;Class Method&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or put query into Model as a &lt;strong&gt;Scope&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both of these methods can be used directly at Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;p&gt;Class Method looks similar to scope, but what difference do they have? Or, which is better? In my opinions, it’s better to use scopes.
For instance, if you make two class methods in Model.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Becasue both of &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;recent&lt;/code&gt; return ActiveRecord of Post, so we can use chain query. Let’s try it in Rails console.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Fine, it found posts which be posted by Potter and be posted in recent 5 days correctly. But if the author is a nil, what it will happen?&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ops, it found posts which author is nil, but we want to find all post if we do not specify the author. Let’s come back to class methods in Model and refactor &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; method. Now we need a judgment here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We fixed problem indeed. But if we use scopes, it can be solved better. (We don’t want to use if judgment here…)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because scope always returns a chainable object, so we do not need to worry about it anymore.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;scope-merge&quot;&gt;Scope merge&lt;/h1&gt;

&lt;p&gt;Use scope merge, we can combine conditions from different Models. For example, you have two related Models named &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;approved: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comments.approved = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this two Models, there are same query logic &lt;code class=&quot;highlighter-rouge&quot;&gt;where('comments.approved = ?', true)&lt;/code&gt;. We can use merge them with &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Of course, we can get some SQL query code and returns.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Whatever Class Methods or Scopes can get same returns. Class Method maybe more understandable, it can describe more details for complicated queries. But Scopes can simplify logic relationship, it always returns chainable object. In my opinion, MVC thinkings will recommend using the scope.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 16:12:10 +0900</pubDate>
        <link>https://simcookies.github.io/2016/12/04/class-method-vs-scope</link>
        <guid isPermaLink="true">https://simcookies.github.io/2016/12/04/class-method-vs-scope</guid>
        
        <category>refactoring</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
