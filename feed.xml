<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simcookies</title>
    <description>All about Simcookies Project.</description>
    <link>http://simcookies.github.io/</link>
    <atom:link href="http://simcookies.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Dec 2017 14:11:48 +0900</pubDate>
    <lastBuildDate>Sun, 03 Dec 2017 14:11:48 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Web 全栈开发指南</title>
        <description>&lt;p&gt;周末一天的时间看完了&lt;em&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web 全栈开发指南&lt;/a&gt;&lt;/em&gt;这本书&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. 正如书中所说的一样, 其着重于Web 开发的原理,一般方法和工具, 而不是某一种特殊的语言. 书的前面一半的内容主要是介绍 Web 相关的基本知识包括了网页三要素 HTML, CSS, JavaScript 三个部分的基本内容, 因此我就大概地翻看了一遍. 主要是第三章的_编程语言与技术_开始着重看了一下.再加上其他的一些调查, 写成下面的博客. (这一篇实在不想用英语写了 :joy:)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;动态内容服务端编程方式&quot;&gt;(动态内容)服务端编程方式&lt;/h1&gt;

&lt;h2 id=&quot;通用网关接口cgi&quot;&gt;通用网关接口CGI&lt;/h2&gt;

&lt;p&gt;虽然目前已经基本上没有人在用了, 但是Web 服务器还是在支持着它.它的处理步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过 Internet 把用户的请求送到服务器.&lt;/li&gt;
  &lt;li&gt;服务器把接收到的请求交给 CGI 程序处理.&lt;/li&gt;
  &lt;li&gt;CGI 程序把处理的结果传给服务器.&lt;/li&gt;
  &lt;li&gt;服务器再把响应送给用户&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而 CGI 在处理的时候是每一个请求对应一个进程的, 因此对于较大请求量的时候 会消耗很多资源, CGI 就不是一个好的选择了.&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h2 id=&quot;java-servlet&quot;&gt;Java (Servlet)&lt;/h2&gt;

&lt;p&gt;Java Servlet 只能为 Java 提供服务器. 它的处理步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过 Internet 把用户的请求送到服务器.&lt;/li&gt;
  &lt;li&gt;服务器启动并调用 Servlet&lt;/li&gt;
  &lt;li&gt;Servlet 根据用户的请求进行处理并传递给服务器&lt;/li&gt;
  &lt;li&gt;服务器再把响应送给用户&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;和 CGI 不同的地方在于, Servlet 每一个请求对应一个线程. 在性能方面比 CGI 高很多. 具体的这里有一篇&lt;a href=&quot;http://www.c4learn.com/java/servlet/servlet-vs-cgi/&quot;&gt;参考文章&lt;/a&gt;. 而在真正开发的过程中我们接触到的是框架, 比如 &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; 之类的.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Python 在服务端主要依赖于 WSGI (Web Server Gateway Interface) 规范. 这个规范定义了服务器和应用程序的交互接口.&lt;/p&gt;

&lt;p&gt;在 WSGI 中有一个中间件(Middleware) 的概念: 服务器在接收到请求之后, 由中间件先进行响应, 然后再传递给下一级的应用或者下一层的中间件. 简单的说, 就是在服务器与应用程序之间加上了一层或者多层中间处理, 在中间件里面, 可以实现日志, 错误处理等等.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;Ruby 是我一直使用的开发语言. 虽然一直在使用 Ruby on Rails, 但是居然没有听说过 Rack, 实在是汗颜.:cold_sweat: 同样类似于 Python 的 WSGI, Rack 也有中间件的概念&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nodejs&quot;&gt;Node.js&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;服务器架构&quot;&gt;服务器架构&lt;/h1&gt;

&lt;p&gt;以前对这一块也是模模糊糊, 看完之后有了一个大概的轮廓. 包括我们常听说的 Apache 或者 Nginx, IIS 之类的各种概念进行一下整理.&lt;/p&gt;

&lt;h2 id=&quot;最基本的情况&quot;&gt;最基本的情况&lt;/h2&gt;

&lt;p&gt;如果站点的访问量不是很多, 可以直接把服务器放在网络上, 给出下图的例子:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/basic_web_server.png&quot; alt=&quot;basic instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的 Web 服务器可以是 Apache HTTP Server, Nginx, Microsoft 的 IIS 等等. 还有上面说到的专供的 Servlet, 只为 Java 服务之类的服务器. 还有 Node.js 自带的 Web 服务器.&lt;/p&gt;

&lt;h2 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h2&gt;

&lt;p&gt;一般来说网站一个服务器是不够的, 需要一组服务器. 负载均衡器接受 HTTP 请求, 并分发给内部的 Web 服务器. 知名的负载均衡器有 &lt;a href=&quot;https://en.wikipedia.org/wiki/HAProxy&quot;&gt;HAProxy&lt;/a&gt;, 而上面说的 Apache, Nginx 也可以充当负载均衡器.&lt;/p&gt;

&lt;h2 id=&quot;具体分析&quot;&gt;具体分析&lt;/h2&gt;

&lt;p&gt;之前的开发中总是会听到 Nginx + Passenger + Ruby on Rails 或者 Apache + Unicorn + Ruby on Rails 的服务器结构, 详细解释每一个环节的作用就是:&lt;/p&gt;

&lt;p&gt;Nginx 或者 Apache 是 负载均衡器同时也是 Web 服务器, 它们用来响应客户端的请求进而转发给应用程序. Unicorn 是 Ruby 的一个 HTTP 服务器. 他会在自己的进程空间内加载 Ruby 的应用, 并且将外部的 HTTP 内容进行包装后和 Ruby 应用进行通信.Unicorn 易于调试, 用于管理 Rack 类的应用程序. 与之类似的还有 Thin, Puma 等等.而 Passenger 有点特殊, 它直接融入到了Nginx 或者 Apache, 成为他们能够直接使用的模块:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From Wikipedia
Phusion Passenger (informally also known as mod_rails and mod_rack among the Ruby community) is a free web server and application server with support for Ruby, Python and Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Passenger 也可以统一管理 Rails 的进程数量, 生命周期, 请求队列等等. 最后这张图可能有助于理解上述的关系:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/server_analysis.png&quot; alt=&quot;server analysis&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://fujiike.hateblo.jp/entry/2015/08/20/170751&quot;&gt;ApacheとNginxとPassengerとUnicornの違い【すごい初心者向け】&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options&quot;&gt;Ruby on Rails Server options&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web全栈技术指南&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;严格地说只是作者自己的总结写成的 Gitbook. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;对于 PHP 不是很了解, 毕竟我是入门级玩家. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;对于 WSGI 和 Rack 的介绍, 我想再具体写一个博客. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;在学习过程中, 可能学完之后再写博客~ &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 02 Dec 2017 15:49:44 +0900</pubDate>
        <link>http://simcookies.github.io/2017/12/02/fullstack-reference</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/12/02/fullstack-reference</guid>
        
        <category>ruby</category>
        
        <category>python</category>
        
        <category>server</category>
        
        
        <category>basic</category>
        
      </item>
    
      <item>
        <title>Rails error of 'key must be 32 bytes'</title>
        <description>&lt;p&gt;I made a Rails Application with Rails 5.0.0.1, and got an strange error when I run the server by localhost.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ArgumentError in WelcomeController#index
	key must be 32 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And details are here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Extracted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#72):&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cipher&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@secret&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Rely on OpenSSL for the initialization vector&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_iv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It seems the version of the Rails need to be update. So I changed Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;# gem 'rails', '5.0.0.1' =&amp;gt; '5.0.1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; to update the gems. The error will be gone.&lt;/p&gt;

&lt;p&gt;Some people said they sitll got the error after they change the Gemfile. It’s a better way to update Ruby version too. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25185&quot;&gt;refference is here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 15:49:44 +0900</pubDate>
        <link>http://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>solution</category>
        
      </item>
    
      <item>
        <title>Insert Math into post with MathJax</title>
        <description>&lt;p&gt;Sometimes we may need to insert math equation into posts. &lt;a href=&quot;https://www.mathjax.org/#about&quot;&gt;MathJax&lt;/a&gt; can help us to do this. We can write LaTeX-like equations in posts with MathJax. And it’s also easy to config into Jekyll.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;add-script-tag-into-html-head&quot;&gt;Add script tag into HTML head.&lt;/h2&gt;

&lt;p&gt;Add the script below into every page (or add it into template page “default.html”):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-redcarpet-or-karmdown-as-markdown-compiler&quot;&gt;Use redcarpet or karmdown as Markdown compiler&lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Set it in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;markdwon: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kramdown&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or redcarpet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-latex-like-code&quot;&gt;Use LaTeX-like code&lt;/h2&gt;

&lt;p&gt;MathJax use &lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \\)&lt;/code&gt; for inline math and &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[ \\]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$$ $$&lt;/code&gt; for displayed math. For instance:&lt;/p&gt;

&lt;div class=&quot;language-latex highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; E &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; mc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can get:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=mc^2&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \alpha\times\beta\times\gamma \\)&lt;/code&gt; can get \(\alpha\times\beta\times\gamma\)&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;Because some strange things will happen when you use default Markdown compiler. &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Nov 2017 19:50:32 +0900</pubDate>
        <link>http://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</guid>
        
        <category>jekyll</category>
        
        <category>latex</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using BasicTex on OSX Terminal</title>
        <description>&lt;p&gt;MacTeX is a great GUI Application for Latex Distribution. But it is too big with 2.8GB which make me can not accept it. Luckly MacText also provides a smaller distribution named BaiscTeX. I wrote this blog to take notes of installing BasicTeX and subsequent steps. The goal is to write and compile tex file in Emacs.&lt;/p&gt;

&lt;h1 id=&quot;installing-basictex&quot;&gt;Installing BasicTeX&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Download &amp;amp; install &lt;a href=&quot;http://www.tug.org/mactex/morepackages.html&quot;&gt;BasicTeX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &amp;amp; install &lt;a href=&quot;http://amaxwell.github.io/tlutility/&quot;&gt;TeX Live Utility&lt;/a&gt;: TeX Live Utility is a GUI App for management of updating, install and otherwis managing TeX Live.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After these two steps, latex can be used correctly. &lt;code class=&quot;highlighter-rouge&quot;&gt;latex xxx.tex&lt;/code&gt; to compile tex file to dvi file. &lt;code class=&quot;highlighter-rouge&quot;&gt;dvipdfmx&lt;/code&gt; to make dvi file to pdf file. However, it just can be useful for english writting, if you want to write for Chinese or Japanese, it needs other configurations.&lt;/p&gt;

&lt;h2 id=&quot;install-platex&quot;&gt;Install platex&lt;/h2&gt;

&lt;p&gt;Use Tex Live Utility can install different compilers include &lt;code class=&quot;highlighter-rouge&quot;&gt;platex&lt;/code&gt; or some font packages.&lt;/p&gt;

&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;Solutions of some errors.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“jsartile” can not be found: Tex Live Utility(TLU) install “jsclasses”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘newpxtext.sty’ not found.: TLU install “newpx”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘fontaxes.sty’ not found.: TLU install “fontaxes”;&lt;/li&gt;
  &lt;li&gt;! LaTeX Error: File ‘newtxmath.sty’ not found.: TLU install “newtx”;&lt;/li&gt;
  &lt;li&gt;Here is a big error when output dvi to pdf:
    &lt;blockquote&gt;
      &lt;p&gt;kpathsea: Running mktexpk –mfmode / –bdpi 600 –mag 1+0/600 –dpi 600 qtmr.pfb
mktexpk: don’t know how to create bitmap font for qtmr.pfb.
mktexpk: perhaps qtmr.pfb is missing from the map file.
kpathsea: Appending font creation commands to missfont.log.&lt;/p&gt;

      &lt;p&gt;dvipdfmx:warning : Could not locate a virtual/physical font for TFM “ntx-Regular-tlf-t1”.
dvipdfmx:warning : » This font is mapped to a physical font “qtmr.pfb”.
dvipdfmx:warning : » Please check if kpathsea library can find this font: qtmr.pfb
dvipdfmx:fatal: Cannot proceed without .vf or “physical” font for PDF output…&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;TLU to install &lt;code class=&quot;highlighter-rouge&quot;&gt;kastrup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tex-gyre&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When transfer dvi to pdf with dvipdfmx, it said: Could not locate a virtual/physical font for TFM “rml” (or “gbm” here).: Find file of /usr/local/texlive/2017basic/texmf-config/dvipdfmx/dvipdfmx.cfg, and uncomment “cid-x.map”. After that, make &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mktexlsr&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;dvipdfmx can load cid-x.map, but it said: dvipdfmx:fatal: Could not find encoding file “H”. : Tex Live Utility installed “adobemapping”.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 18 Oct 2017 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2017/10/18/using-basictex-on-osx-terminal</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/10/18/using-basictex-on-osx-terminal</guid>
        
        <category>latex</category>
        
        <category>OXS</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Network Studying Note 2</title>
        <description>&lt;p&gt;In the post of &lt;a href=&quot;/2017/03/19/network_studying_note_1&quot;&gt;Network Studying Note 1&lt;/a&gt;, I took notes about the history of Internet and Internet Protocol Suite, especially, the TCP/IP Protocol. TCP/IP contains four layers of Application, Transport, Network and Network Interface. During transmission from layer to layer, top-down is called &lt;strong&gt;Encapsulation&lt;/strong&gt; and button-up is called &lt;strong&gt;Decapsulation&lt;/strong&gt;. In this post, I will write about the Encapsulations of last three layers and also includes about Three-way-Handshake.&lt;/p&gt;

&lt;p&gt;In order to transport network data, the application will send data to transport layer with some header data. The Application is just responsible for processing data logically and regardless of the transmission of it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;transport-layer&quot;&gt;Transport Layer&lt;/h1&gt;

&lt;p&gt;TCP Segment &amp;amp; UDP Segment&lt;/p&gt;

&lt;p&gt;The best-known transport protocol of TCP/IP is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;Transmission Control Protocol (TCP)&lt;/a&gt;. It is used for connection-oriented transmissions, whereas the connectionless &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;User Datagram Protocol (UDP)&lt;/a&gt; is used for simpler messaging transmissions. TCP is the more complex protocol, due to its stateful design incorporating reliable transmission and data stream services.&lt;/p&gt;

&lt;h2 id=&quot;tcp&quot;&gt;TCP&lt;/h2&gt;

&lt;p&gt;TCP provides reliable, ordered, and error-checked delivery of a stream of octets between applications running on hosts communicating over an IP network. Major Internet applications such as the WWW, email, remote administration, and file transfer rely on TCP. This picture shows the segment structure of TCP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tcp_segment.png&quot; alt=&quot;tcp_segment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most used bits are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Source port&lt;/strong&gt; (16 bits): Identifies the sending port. Every server or client has 0 ~ 65535 port, and different ports are corresponding to different services. The most used ports:&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Port Number&lt;/th&gt;
      &lt;th&gt;Server&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;20 or 21&lt;/td&gt;
      &lt;td&gt;FTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;ssh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;Telent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;SMTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;110&lt;/td&gt;
      &lt;td&gt;POP3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;443&lt;/td&gt;
      &lt;td&gt;HTTPS&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Destination port&lt;/strong&gt; (16 bits): Identifies the receiving port&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;

&lt;p&gt;UDP provides checksums for data integrity and port numbers for addressing different functions at the source and destination of the datagram. UDP is different with TCP without having no handshaking dialogues. This picture shows the segment structure of UDP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/udp_segment.png&quot; alt=&quot;udp_segment&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;handshaking&quot;&gt;Handshaking&lt;/h2&gt;

&lt;p&gt;TCP pays more attention to security, instead, UDP pays more attention to effectiveness. Three times handshaking was introduced into TCP for security with a set of SYN, SYN-ACK, ACK signals. As my understanding, it sounds like that a communication in a classroom. A teacher wants to communicate with a student.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firstly, he calls his name and asks him is listening or not, the first handshaking.&lt;/li&gt;
  &lt;li&gt;Secondly, the student answers Yes and asks teacher is still there or not, the second handshaking.&lt;/li&gt;
  &lt;li&gt;Finally, the teacher makes sure and says “I will communicate with you from now” to begin this communication, the third handshaking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After three times handshaking, the safe communication can be established. If the student is not there or after the student said “I’m here” but the teacher was gone, the communication cannot be established. By the way, if the teacher was gone after the first handshaking, the student will always wait for him and try to connect with the teacher after a period of time until the teacher answers or “his death”.
This is one way of &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;DoS Attack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, UDP has no handshaking. The teacher just says what he wants to say regardless of the student’s attendance. So UDP has better effectiveness.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;encapsulation&quot;&gt;Encapsulation&lt;/h1&gt;

&lt;p&gt;How to transmit data with four layers? For UDP, the data of Application will be sent to Transport layer, and it adds UDP header in the front of data and sends to next Internet layer. Internet layer will add IP header in the front of that data and send to Data Link layer. Data Link layer add a Frame header in the front of data and add Frame footer in the behind of data. Finally, it sends the frame by physical signals. Here is the picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/encapsulation.png&quot; alt=&quot;encapsulation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decapsulation has opposite steps of encapsulation.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2017/10/16/network-studying-note-2</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/10/16/network-studying-note-2</guid>
        
        <category>internet</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Network Studying Note 1</title>
        <description>&lt;p&gt;There are some basic pieces of knowledge for programmers, C, Data Structure and Algorithm, Network, Operation System. So it’s time to learning about them deeply. This blog is about my learning note of Network. It includes the history of Internet, theory, and application in Linux. If I want to know a new technology, I will first be interested in its history. Knowing the history of some tech will help me to understand why this tech is necessary and why it’s fixtures work like this. So let me begin with history.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;history-of-internet&quot;&gt;History of Internet&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Development Stage&lt;/th&gt;
      &lt;th&gt;History&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concept was born&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;In order to make computer cooperate with other devices(etc. Printer, Fax), we need to connect them physically with communication devices and lines. Here comes the concept of Network.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Independent Technology&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Since we have the concept of Network, during 70th and 80th at 20 century, many companies began to develop their own communication technology which just can be used for their own devices, include the software and hardware. And the most famous are Xerox and IBM. (Well, maybe you know the Xerox is the company which developed windows-based GUI and Mouse but did not commercialize them. Finally, Apple and Microsoft found business opportunities.) &lt;br /&gt;&lt;br /&gt;Xerox developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt;, and IBM developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Token_ring&quot;&gt;Token-Ring&lt;/a&gt;. They were quite fine at that moment, but the question is, the different company has different devices, and they can not talk with each other. For the formal users, it seems they still can not use Network if they use devices from the different company.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Integration with Protocol&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Advanced Research Project Agency, which knew as ARPA of U.S.A, was also focusing on the development project of net communication. At 1967, they put forward the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/ARPANET&quot;&gt;ARPANET&lt;/a&gt; and put in into operation at the end of 1969. Different from other net technology, ARPANET introduced Network Control Protocol (NCP) as the communications protocol and provided a standard method to establish reliable communications among different computers and other devices. &lt;br /&gt;&lt;br /&gt;However, even it tried to make everything connected together, ARPANET still can not communicate with few important devices, especially, SAT-NET and ALOHA NET. So developer made a new protocol which named Transmission Control Protocol and Internet Protocol (TCP/IP) and knew by everyone. The new protocol made ARPANET connected with other devices. &lt;br /&gt;&lt;br /&gt;ARPANET was transferred to Defense Department Communicationg Agence of U.S.A at 1975. After that, many new networks were created at the base of ARPANET, like Computer Science Research Network (CSRNET), Canadian Network (CDNET), Because It’s Time Network (BITNET), National Science Foundation Network (NSFNET) and so on. TCP/IP protocols replaced NCP as the ARPANET’s principal protocol, even it was written as a part of BSD Unix. During the development of the different network, NSFNET became core between universities and ARPANET was closed at 1989 finally.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Open to Public&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The creation of &lt;a href=&quot;https://en.wikipedia.org/wiki/National_Science_Foundation_Network&quot;&gt;NSFET&lt;/a&gt; is a very important flag of the Internet development. It turned into commercial operation at 1994, and after that, Internet was open to the public.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The history of Internet shows the importance of the &lt;strong&gt;standard&lt;/strong&gt;. Only with the protocol, the different devices can connect with each other. The Application can focus on data processing instead of data transmission. So I will go on the blog with some protocols.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;internet-protocol-suite-ips&quot;&gt;Internet Protocol Suite (IPS)&lt;/h1&gt;

&lt;h2 id=&quot;osi-model&quot;&gt;OSI Model&lt;/h2&gt;

&lt;p&gt;Open Systems Interconnection model (&lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;OSI model&lt;/a&gt;) partitions a communication system into 7 abstraction layers. And here is the structure and composition of 7 layers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layers&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Protocol data unit&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7.Application&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;High-level APIs, including resource sharing, remote file access&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.Presentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Translation of data between a networking service and an application; including character encoding, data compression and encryption/decryption&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5.Session&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Managing communication sessions, i.e. continuous exchange of information in the form of multiple back-and-forth transmissions between two nodes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4.Transport&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Segment(TCP)/Datagram(IP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data segments between points on a network, including segmentation, acknowledgement and multiplexing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.Network&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Packet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Structuring and managing a multi-node network, including addressing, routing and traffic control&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.Data link&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data frames between two nodes connected by a physical layer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.Physical&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Transmission and reception of raw bit streams over a physical medium&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The higher layer will package its data with a header at beginning of itself, and then send the package to next layer. This operation will be repeated and host device sends packaged data by physical line finally:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/osi_layers.gif&quot; alt=&quot;OSI model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OSI model does not provide some methods which can be realized, just gives some concepts. So it is not a standard but a concept framework which can be referred when createing a new standard. TCP/IP is such an instance.&lt;/p&gt;

&lt;h2 id=&quot;tcpip-model&quot;&gt;TCP/IP model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot;&gt;TCP/IP&lt;/a&gt; is a quite successful protocol, so it was used to replace NCP in ARPANET. There are two reasons. First, it is easier than OSI model because it just has four layers. Second, it can support so many protocols at low layers (Physical layer and Data link layer in OSI model), include Ethernet, Token-Ring, FDDI, PPP, ATM and so on. We can think TCP/IP model is an easier version of OSI model. Here is their relationship and the most used protocols and servers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tcp_ip_structure.png&quot; alt=&quot;TCP/IP protocol suite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we know, TCP/IP is most used in fact. Just like OSI model, communication just exists between the same layer, higher will make header or footer to the data package and send it to the lower layer. The receiver host will make inverse operations to get final data. Understanding about these processes is important, and then it’s time to understand every layer, but this post is just until here. I will go on with a new one. &amp;gt;= =&amp;lt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Wiki&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;obj=page&amp;amp;pageid=142&quot;&gt;Linux tutorial about TCP/IP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://cn.linux.vbird.org/linux_server/&quot;&gt;Linux鸟哥的私房菜（服务器篇）&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2017/03/19/network_studying_note_1</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/03/19/network_studying_note_1</guid>
        
        <category>internet</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Virtual Environment for Python</title>
        <description>&lt;p&gt;As a student, I need to deal with a lot of experiment data and have to make mess data to porcelain figures. &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt; seems a good idea, but you know, we can not pay for it. Naturally, I chose &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. Python has two famous stable version–2.7 and 3.5. But unfortunately, they can not compatible with each other. For scientific computing, it’s better to use 2.7 because lots of modules only support 2.7. But there is a trend to use high version finally.&lt;/p&gt;

&lt;p&gt;For example, I am using 2.7 to learn &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, using 3.5 to learn &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;. The Mac or GNU/Linux also has the default version of Python. Finally, there will be three different versions of Python and at least two versions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Pip_(package_manager)&quot;&gt;pip&lt;/a&gt;. It will be very troublesome to deal with such a mess. Sometimes, I forget which version I am using. And the other reason I feel uncomfortable is I have to install module twice on my Mac which just used for one time.&lt;/p&gt;

&lt;p&gt;For this state, virtualenv is a good choice for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them. It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;installing--basic&quot;&gt;Installing &amp;amp; Basic&lt;/h1&gt;

&lt;p&gt;Installing is very easy, we can install virtualenv via pip:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing, we can check installed modules list via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt;. We can install all the modules in virtualenv, so the modules except virtualenv can be uninstalled via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip uninstall one_package&lt;/code&gt;. OK, it’s time to use virtualenv now!&lt;/p&gt;

&lt;p&gt;Enter your project folder, make a new virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will make a new folder named venv in the current directory. (As a convention, we use venv.) This venv folder contains Python executable files and pip library where you can install modules(Of cause, except virtualenv). The Python executable files will use the version which you use to install virtualenv defaultly. For example, you install virtualenv via pip3 which represent of python3, so the Python excutable files of venv will be python3 too. However, you can change this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv -p /usr/bin/python2.7 venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, it’s time to activate the virtual environment via &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/active
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then the name of virtual environment will appear on the left of prompt, like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; username@computer: ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From now, we can use the environment isolated from the global environment because the modules which we install will be installed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt;. You can leave this virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;management-of-packages&quot;&gt;Management of packages&lt;/h1&gt;

&lt;p&gt;In order to keep your environment consistent, it’s a good idea to “freeze” the current state of the environment packages:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command can create a list file of packages which you installed via pip. This can file can be reused for other environment or by your collaborators. This can help ensure consistency across installations, across deployments, and across developers. They can install necessary packages with the file:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip install -r requirements.txt 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In fact, this is a little similar to &lt;a href=&quot;http://bundler.io/gemfile.html&quot;&gt;Gemfile&lt;/a&gt; which used in Ruby bundle.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Offical Python page: &lt;a href=&quot;https://www.python.org/&quot;&gt;https://www.python.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Guide to Python: &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;http://docs.python-guide.org/en/latest/dev/virtualenvs/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Python Package Index: &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;https://pypi.python.org/pypi/pip&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 13:07:57 +0900</pubDate>
        <link>http://simcookies.github.io/2017/01/02/virtual-environment-for-python</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/01/02/virtual-environment-for-python</guid>
        
        <category>python</category>
        
        <category>environment</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Class Method V.S Scope</title>
        <description>&lt;p&gt;In this post, I want to write something about Class Mehotd and Scope. Firstly, let’s look some Rails code in Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;give-problems&quot;&gt;Give Problems&lt;/h1&gt;

&lt;p&gt;For MVC framework, of course, there are some problems with this code.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It &lt;strong&gt;exposes implementation details&lt;/strong&gt;. In fact, we should not see the details about data in Controller, logic should be put into Model.&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;produces unnecessary duplication&lt;/strong&gt;. This code may be used in other places, so we should be DRY(Don’t Repeat Yourself).&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;complicates writing tests&lt;/strong&gt;. If you write this code in Controller, it will be necessary to write test for Controller, but this is not what we want. We want to just write unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;p&gt;Here are two solutions to fix these problems:&lt;/p&gt;

&lt;p&gt;Put query into Model as a &lt;strong&gt;Class Method&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or put query into Model as a &lt;strong&gt;Scope&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both of these methods can be used directly at Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;p&gt;Class Method looks similar to scope, but what difference do they have? Or, which is better? In my opinions, it’s better to use scopes.
For instance, if you make two class methods in Model.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Becasue both of &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;recent&lt;/code&gt; return ActiveRecord of Post, so we can use chain query. Let’s try it in Rails console.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Fine, it found posts which be posted by Potter and be posted in recent 5 days correctly. But if the author is a nil, what it will happen?&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ops, it found posts which author is nil, but we want to find all post if we do not specify the author. Let’s come back to class methods in Model and refactor &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; method. Now we need a judgment here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We fixed problem indeed. But if we use scopes, it can be solved better. (We don’t want to use if judgment here…)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because scope always returns a chainable object, so we do not need to worry about it anymore.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;scope-merge&quot;&gt;Scope merge&lt;/h1&gt;

&lt;p&gt;Use scope merge, we can combine conditions from different Models. For example, you have two related Models named &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;approved: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comments.approved = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this two Models, there are same query logic &lt;code class=&quot;highlighter-rouge&quot;&gt;where('comments.approved = ?', true)&lt;/code&gt;. We can use merge them with &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Of course, we can get some SQL query code and returns.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Whatever Class Methods or Scopes can get same returns. Class Method maybe more understandable, it can describe more details for complicated queries. But Scopes can simplify logic relationship, it always returns chainable object. In my opinion, MVC thinkings will recommend using the scope.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 16:12:10 +0900</pubDate>
        <link>http://simcookies.github.io/2016/12/04/class-method-vs-scope</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/12/04/class-method-vs-scope</guid>
        
        <category>refactoring</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Using Guard Clauses</title>
        <description>&lt;p&gt;During my Rails develop process, sometimes I need to use many conditions in code and code will be a little chubbby like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish_book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_approved?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad&quot;&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publish_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is a bit unclear and unreadable. When I study in &lt;a href=&quot;https://www.codeschool.com/&quot;&gt;Code School&lt;/a&gt;, I learned about a new concept called &lt;code class=&quot;highlighter-rouge&quot;&gt;Guard Clauses&lt;/code&gt;. We can use it to replace nested conditional with Guard Clauses.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish_book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_approved?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad&quot;&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publish_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It becomes clear and readable indeed. So I recommend this way to replace nested conditional during refactoring.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 20:46:41 +0900</pubDate>
        <link>http://simcookies.github.io/2016/11/06/using-guard-clauses</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/11/06/using-guard-clauses</guid>
        
        <category>refactoring</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Experiences &amp; Feelings of RubyKaigi</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RubyKaigi&quot;&gt;RubyKaigi&lt;/a&gt; 2016 was held at Kyoto, Japan from 9/8 to 9/10. I was so lucky to get such a good chance to attend this meeting with my colleagues of &lt;a href=&quot;https://tsubaiso.jp/&quot;&gt;Tusbaiso&lt;/a&gt;. During those three days, I got many experiences. Especially, as a fresh man in area of programming and Rails Development, it was quite valuable because of broadening my horizons. So I want to write a memo about my feelings about this meeting.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;about-rubykaigi&quot;&gt;About RubyKaigi&lt;/h1&gt;

&lt;p&gt;Meeting began from 9/8, and sessions were held by English and Japanese together. Visitors can choose sessions which they are interest in. Firstly, Ruby Language Inventor, Matsumoto Yukihiro (a.k.a Matz), made the opening speech about &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2Ag8l-wq5qk&quot;&gt;Ruby3 Typing&lt;/a&gt;&lt;/em&gt;, which talked about recently change of Dynamic Programming Language and Ruby3 Typing in the future.&lt;/p&gt;

&lt;p&gt;After opening speech, there were many other excellent presentations. For example, I listened about &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lQvDd9GPSB4&quot;&gt;Fearlessly Refactoring Legacy Ruby&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UlfyX8zRVc8&quot;&gt;Deletion Driven Development&lt;/a&gt;&lt;/em&gt;. I got a deep understanding about coding and refactoring through these two sessions. Of course, other presentations were also quite excellent, I also knew some new Technology and Programming concept from those. However, for me, it just likes a flood of knowledge because of lack of basic knowledge.&lt;/p&gt;

&lt;p&gt;During these three days, we had official party, signing sessions and delicious Bentou launch. It was so unbelievable I can see and even talk to so many Ruby community committees. Many companies which using Ruby on Rails Framework from different countries and regions also showed on site. Total number of visitors, staffs and speakers almost got to 1000. Such a grand meeting!&lt;/p&gt;

&lt;h1 id=&quot;my-thinking-and-feeling&quot;&gt;My thinking and feeling&lt;/h1&gt;

&lt;h2 id=&quot;feelings-from-rubykaigi&quot;&gt;Feelings from RubyKaigi&lt;/h2&gt;

&lt;p&gt;It’s so lucky to get choice to attend Rubykaigi, such a grand meeting. I can meet so many people and know so many things which I never know if I still immersed my world. From the speechers, committers and other listeners, I can feel the big gap between them and me. &lt;strong&gt;Just like listen a talk show, but I can not get the point to laugh.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remembered some one gave a speech about &lt;strong&gt;Concurrency&lt;/strong&gt; in Ruby. He talked a lot about how to improve algorithm to speed up our code with &lt;strong&gt;Concurrency&lt;/strong&gt;, but I can not get anything at all because I have no idea about what is concurrency not to mention how to improve my code. From their code, I can see names of variables and functions, see their focus in thinking way, see tools what they are using, and compare these to mine, it just like the difference between &lt;strong&gt;Regular Army&lt;/strong&gt; and &lt;strong&gt;Miscellaneous Army&lt;/strong&gt; = =||.&lt;/p&gt;

&lt;h2 id=&quot;experiences-of-programming&quot;&gt;Experiences of programming&lt;/h2&gt;

&lt;p&gt;I began doing part-time jobs at Tusbaiso from 2015/12, as a totally fresh man in area of Web Development. So I did not have enough basic knowledges about Ruby on Rails, or it can be said I never received basic education of computer science. In fact, My major is Electronic Engineering, it includes both software and hardware. I made a lot developments in &lt;a href=&quot;https://en.wikipedia.org/wiki/Embedded_system&quot;&gt;Embedded System&lt;/a&gt;, it just needs some basic knowledge about C Language and Assembly Language.&lt;/p&gt;

&lt;p&gt;During developing of embedded system, especially of &lt;a href=&quot;https://en.wikipedia.org/wiki/STM32&quot;&gt;STM32&lt;/a&gt;, I accessed the new programming structure includes modular thinking way for STM32 official C Library.That’s my first time to notice that my code was such a mess before. Before, I wrote all initialize code in main function. After reading official references of STM32, I began to know importance of writing sub-functions and making my library. I also noticed it is important to make good names for a function and its params.&lt;/p&gt;

&lt;p&gt;Gradually, I found the beauty of software and began to learn by myself. C++, Java, Python, all of these attracted me deeply, even I did not know which is better or what’s meaning if I learn. I can use IDE such as Visual Studio, Eclipse, Code Block e.t.c. I tried to develop a small app in platform of Android. I knew the concept of Obejct-Oriented and Process-Oriented, came into contact with Linux. I made a Mini MP3 System in STM32 with uC/OS, uC/GUI and FS, which I am so pride until now.&lt;/p&gt;

&lt;p&gt;Finally, I said to others: Hei, see it! I can program! However, after enter Tusbaiso, I have no confidence to say this again, because I found: I can not program at all.&lt;/p&gt;

&lt;h2 id=&quot;struggle-in-mind&quot;&gt;Struggle in mind&lt;/h2&gt;

&lt;p&gt;Why I have no confidence now? I have asked myself many times. I can not answer. But the situation is I lack basic knowledges indeed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even I learned C Language systematically, but I still have no deep understanding about Point or I can say I never used this before.&lt;/li&gt;
  &lt;li&gt;I just know the concept of Obejct-Oriented, but still can not distinguish Class Method and Member Method.&lt;/li&gt;
  &lt;li&gt;Tranplanted OS successfully, but did not know how OS schedules tasks, how the process and thread works.&lt;/li&gt;
  &lt;li&gt;I have GitHub Account, but never read code deeply and not to mention commit some project.&lt;/li&gt;
  &lt;li&gt;I almost have no knowledge about algorithm and data structure.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one word, I have never practiced and always immersed in my own small “programming” world. When I entered Tsubaiso as a part-time job, I really felt very happy because I can do a job like a real programmer. But I realized the &lt;strong&gt;Technology’s Lack&lt;/strong&gt; was quite a problem. However I love programming, it almost becomes one part of my life. This is a contradiction to me. How to improve myself in technology and thinking ways?&lt;/p&gt;

&lt;h1 id=&quot;cheer-myself-up&quot;&gt;Cheer myself up&lt;/h1&gt;

&lt;p&gt;I want to tell myself: If I really like technology and programming, if I really want to go on with the way, I need a &lt;strong&gt;detailed plan&lt;/strong&gt;, I need to improve myself. As my opinion, the best ways to improve someone are reading, coding and writing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Yes, I need to read, not only the books of some basic concepts, but also the code other people write. Fortunately, I got some chance to read some excellent books which recommended by my colleagues. Such as &lt;strong&gt;The Art of Readable Code&lt;/strong&gt; and &lt;strong&gt;Complete Code&lt;/strong&gt;. And I have made a plan of reading for this year. If time allowed, I will make a Book Reading Part into my blog. In this part, I want to show my reading plan, and of course, write some memos. I will also focus one or two projects in GitHub. Read their code and documents. (According my level, I think one or two is enough.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I need more coding experiences to form a good programming habit. Just keeping on coding can help me find the lack of myself. Keep on maintaining my GitHub pages blog, because to use Static Pages Generator – &lt;a href=&quot;/2016/05/01/post-blogs-with-jekyll&quot;&gt;Jekyll to make a blog&lt;/a&gt; is a challenge in Front-End development. Keep using Ruby on Rails for part-time job, and also study deeply about Linux. Maybe I have no clear aims, but during process of coding, I believe I can discover it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep Writing. I know my English is so poor, = =||…Well, tell the truth, sometimes I also can not bear my grammar and pronunciation(So if you are reading this essay or other post in my blog, please forgive me, and if there are any problems you care, please feel free to &lt;a href=&quot;/about&quot;&gt;contact me&lt;/a&gt;~~). Precisely because of this, I need to improve my writing skills! I will try my best to post one blog in two weeks. The content may be about technology, my reading memo or just essay.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any way, I do not want to immerse myself in a small world anymore, I need change. Here I find a beautiful sentence, share with you, who are reading this essay and try to understanding me, thank you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Flollowing heart and intuition.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each of us has a fire in our hearts burning for something. It’s our responsibility in life to find it and keep it lit. This is your life, and it’s a short one. Don’t let others extinguish your flame. Try what you want to try. Go where you want to go. Follow your own intuition. Dream with your eyes open until you know exactly what it looks like. Then do at least one thing every day to make it a reality.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 22:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/10/11/experices-and-feelings-of-rubykaigi</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/10/11/experices-and-feelings-of-rubykaigi</guid>
        
        <category>ruby</category>
        
        <category>meeting</category>
        
        
        <category>essay</category>
        
      </item>
    
  </channel>
</rss>
