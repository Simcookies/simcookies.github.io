<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simcookies</title>
    <description>All about Simcookies Project.</description>
    <link>http://simcookies.github.io/</link>
    <atom:link href="http://simcookies.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Mar 2017 19:12:37 +0900</pubDate>
    <lastBuildDate>Tue, 21 Mar 2017 19:12:37 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Network Studying Note 1</title>
        <description>&lt;p&gt;There are some basic pieces of knowledge for programmers, C, Data Structure and Algorithm, Network, Operation System. So it’s time to learning about them deeply. This blog is about my learning note of Network. It includes the history of Internet, theory, and application in Linux. If I want to know a new technology, I will first be interested in its history. Knowing the history of some tech will help me to understand why this tech is necessary and why it’s fixtures work like this. So let me begin with history.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;history-of-internet&quot;&gt;History of Internet&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Development Stage&lt;/th&gt;
      &lt;th&gt;History&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concept was born&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;In order to make computer cooperate with other devices(etc. Printer, Fax), we need to connect them physically with communication devices and lines. Here comes the concept of Network.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Independent Technology&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Since we have the concept of Network, during 70th and 80th at 20 century, many companies began to develop their own communication technology which just can be used for their own devices, include the software and hardware. And the most famous are Xerox and IBM. (Well, maybe you know the Xerox is the company which developed windows-based GUI and Mouse but did not commercialize them. Finally, Apple and Microsoft found business opportunities.) &lt;br /&gt;&lt;br /&gt;Xerox developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt;, and IBM developed &lt;a href=&quot;https://en.wikipedia.org/wiki/Token_ring&quot;&gt;Token-Ring&lt;/a&gt;. They were quite fine at that moment, but the question is, the different company has different devices, and they can not talk with each other. For the formal users, it seems they still can not use Network if they use devices from the different company.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Integration with Protocol&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Advanced Research Project Agency, which knew as ARPA of U.S.A, was also focusing on the development project of net communication. At 1967, they put forward the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/ARPANET&quot;&gt;ARPANET&lt;/a&gt; and put in into operation at the end of 1969. Different from other net technology, ARPANET introduced Network Control Protocol (NCP) as the communications protocol and provided a standard method to establish reliable communications among different computers and other devices. &lt;br /&gt;&lt;br /&gt;However, even it tried to make everything connected together, ARPANET still can not communicate with few important devices, especially, SAT-NET and ALOHA NET. So developer made a new protocol which named Transmission Control Protocol and Internet Protocol (TCP/IP) and knew by everyone. The new protocol made ARPANET connected with other devices. &lt;br /&gt;&lt;br /&gt;ARPANET was transferred to Defense Department Communicationg Agence of U.S.A at 1975. After that, many new networks were created at the base of ARPANET, like Computer Science Research Network (CSRNET), Canadian Network (CDNET), Because It’s Time Network (BITNET), National Science Foundation Network (NSFNET) and so on. TCP/IP protocols replaced NCP as the ARPANET’s principal protocol, even it was written as a part of BSD Unix. During the development of the different network, NSFNET became core between universities and ARPANET was closed at 1989 finally.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Open to Public&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The creation of &lt;a href=&quot;https://en.wikipedia.org/wiki/National_Science_Foundation_Network&quot;&gt;NSFET&lt;/a&gt; is a very important flag of the Internet development. It turned into commercial operation at 1994, and after that, Internet was open to the public.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The history of Internet shows the importance of the &lt;strong&gt;standard&lt;/strong&gt;. Only with the protocol, the different devices can connect with each other. The Application can focus on data processing instead of data transmission. So I will go on the blog with some protocols.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;internet-protocol-suite-ips&quot;&gt;Internet Protocol Suite (IPS)&lt;/h1&gt;

&lt;h2 id=&quot;osi-model&quot;&gt;OSI Model&lt;/h2&gt;

&lt;p&gt;Open Systems Interconnection model (&lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;OSI model&lt;/a&gt;) partitions a communication system into 7 abstraction layers. And here is the structure and composition of 7 layers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layers&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Protocol data unit&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7.Application&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;High-level APIs, including resource sharing, remote file access&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.Presentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Translation of data between a networking service and an application; including character encoding, data compression and encryption/decryption&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5.Session&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Managing communication sessions, i.e. continuous exchange of information in the form of multiple back-and-forth transmissions between two nodes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4.Transport&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Segment(TCP)/Datagram(IP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data segments between points on a network, including segmentation, acknowledgement and multiplexing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.Network&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Packet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Structuring and managing a multi-node network, including addressing, routing and traffic control&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.Data link&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reliable transmission of data frames between two nodes connected by a physical layer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.Physical&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Transmission and reception of raw bit streams over a physical medium&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The higher layer will package its data with a header at beginning of itself, and then send the package to next layer. This operation will be repeated and host device sends packaged data by physical line finally:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/osi_layers.gif&quot; alt=&quot;OSI model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OSI model does not provide some methods which can be realized, just gives some concepts. So it is not a standard but a concept framework which can be referred when createing a new standard. TCP/IP is such an instance.&lt;/p&gt;

&lt;h2 id=&quot;tcpip-model&quot;&gt;TCP/IP model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot;&gt;TCP/IP&lt;/a&gt; is a quite successful protocol, so it was used to replace NCP in ARPANET. There are two reasons. First, it is easier than OSI model because it just has four layers. Second, it can support so many protocols at low layers (Physical layer and Data link layer in OSI model), include Ethernet, Token-Ring, FDDI, PPP, ATM and so on. We can think TCP/IP model is an easier version of OSI model. Here is their relationship and the most used protocols and servers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tcp_ip_structure.png&quot; alt=&quot;TCP/IP protocol suite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we know, TCP/IP is most used in fact. Just like OSI model, communication just exists between the same layer, higher will make header or footer to the data package and send it to the lower layer. The receiver host will make inverse operations to get final data. Understanding about these processes is important, and then it’s time to understand every layer, but this post is just until here. I will go on with a new one. &amp;gt;= =&amp;lt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Wiki&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;obj=page&amp;amp;pageid=142&quot;&gt;Linux tutorial about TCP/IP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://cn.linux.vbird.org/linux_server/&quot;&gt;Linux鸟哥的私房菜（服务器篇）&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2017/03/19/network_studying_note_1</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/03/19/network_studying_note_1</guid>
        
        <category>internet</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Virtual Environment for Python</title>
        <description>&lt;p&gt;As a student, I need to deal with a lot of experiment data and have to make mess data to porcelain figures. &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt; seems a good idea, but you know, we can not pay for it. Naturally, I chose &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. Python has two famous stable version–2.7 and 3.5. But unfortunately, they can not compatible with each other. For scientific computing, it’s better to use 2.7 because lots of modules only support 2.7. But there is a trend to use high version finally.&lt;/p&gt;

&lt;p&gt;For example, I am using 2.7 to learn &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, using 3.5 to learn &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;. The Mac or GNU/Linux also has the default version of Python. Finally, there will be three different versions of Python and at least two versions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Pip_(package_manager)&quot;&gt;pip&lt;/a&gt;. It will be very troublesome to deal with such a mess. Sometimes, I forget which version I am using. And the other reason I feel uncomfortable is I have to install module twice on my Mac which just used for one time.&lt;/p&gt;

&lt;p&gt;For this state, virtualenv is a good choice for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them. It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;installing--basic&quot;&gt;Installing &amp;amp; Basic&lt;/h1&gt;

&lt;p&gt;Installing is very easy, we can install virtualenv via pip:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing, we can check installed modules list via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt;. We can install all the modules in virtualenv, so the modules except virtualenv can be uninstalled via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip uninstall one_package&lt;/code&gt;. OK, it’s time to use virtualenv now!&lt;/p&gt;

&lt;p&gt;Enter your project folder, make a new virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will make a new folder named venv in the current directory. (As a convention, we use venv.) This venv folder contains Python executable files and pip library where you can install modules(Of cause, except virtualenv). The Python executable files will use the version which you use to install virtualenv defaultly. For example, you install virtualenv via pip3 which represent of python3, so the Python excutable files of venv will be python3 too. However, you can change this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv -p /usr/bin/python2.7 venv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, it’s time to activate the virtual environment via &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/active
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then the name of virtual environment will appear on the left of prompt, like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; username@computer: ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From now, we can use the environment isolated from the global environment because the modules which we install will be installed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt;. You can leave this virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;management-of-packages&quot;&gt;Management of packages&lt;/h1&gt;

&lt;p&gt;In order to keep your environment consistent, it’s a good idea to “freeze” the current state of the environment packages:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command can create a list file of packages which you installed via pip. This can file can be reused for other environment or by your collaborators. This can help ensure consistency across installations, across deployments, and across developers. They can install necessary packages with the file:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ pip install -r requirements.txt 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In fact, this is a little similar to &lt;a href=&quot;http://bundler.io/gemfile.html&quot;&gt;Gemfile&lt;/a&gt; which used in Ruby bundle.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Offical Python page: &lt;a href=&quot;https://www.python.org/&quot;&gt;https://www.python.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Guide to Python: &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;http://docs.python-guide.org/en/latest/dev/virtualenvs/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Python Package Index: &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;https://pypi.python.org/pypi/pip&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 13:07:57 +0900</pubDate>
        <link>http://simcookies.github.io/2017/01/02/virtual-environment-for-python</link>
        <guid isPermaLink="true">http://simcookies.github.io/2017/01/02/virtual-environment-for-python</guid>
        
        <category>python</category>
        
        <category>environment</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Class Method V.S Scope</title>
        <description>&lt;p&gt;In this post, I want to write something about Class Mehotd and Scope. Firstly, let’s look some Rails code in Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;give-problems&quot;&gt;Give Problems&lt;/h1&gt;

&lt;p&gt;For MVC framework, of course, there are some problems with this code.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It &lt;strong&gt;exposes implementation details&lt;/strong&gt;. In fact, we should not see the details about data in Controller, logic should be put into Model.&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;produces unnecessary duplication&lt;/strong&gt;. This code may be used in other places, so we should be DRY(Don’t Repeat Yourself).&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;complicates writing tests&lt;/strong&gt;. If you write this code in Controller, it will be necessary to write test for Controller, but this is not what we want. We want to just write unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;p&gt;Here are two solutions to fix these problems:&lt;/p&gt;

&lt;p&gt;Put query into Model as a &lt;strong&gt;Class Method&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or put query into Model as a &lt;strong&gt;Scope&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both of these methods can be used directly at Controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;p&gt;Class Method looks similar to scope, but what difference do they have? Or, which is better? In my opinions, it’s better to use scopes.
For instance, if you make two class methods in Model.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Becasue both of &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;recent&lt;/code&gt; return ActiveRecord of Post, so we can use chain query. Let’s try it in Rails console.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;Potter&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Fine, it found posts which be posted by Potter and be posted in recent 5 days correctly. But if the author is a nil, what it will happen?&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ops, it found posts which author is nil, but we want to find all post if we do not specify the author. Let’s come back to class methods in Model and refactor &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_author&lt;/code&gt; method. Now we need a judgment here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We fixed problem indeed. But if we use scopes, it can be solved better. (We don’t want to use if judgment here…)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'created_at &amp;gt; ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because scope always returns a chainable object, so we do not need to worry about it anymore.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;scope-merge&quot;&gt;Scope merge&lt;/h1&gt;

&lt;p&gt;Use scope merge, we can combine conditions from different Models. For example, you have two related Models named &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;approved: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comments.approved = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this two Models, there are same query logic &lt;code class=&quot;highlighter-rouge&quot;&gt;where('comments.approved = ?', true)&lt;/code&gt;. We can use merge them with &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_approved_comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;approved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Of course, we can get some SQL query code and returns.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Whatever Class Methods or Scopes can get same returns. Class Method maybe more understandable, it can describe more details for complicated queries. But Scopes can simplify logic relationship, it always returns chainable object. In my opinion, MVC thinkings will recommend using the scope.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 16:12:10 +0900</pubDate>
        <link>http://simcookies.github.io/2016/12/04/class-method-vs-scope</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/12/04/class-method-vs-scope</guid>
        
        <category>refactoring</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Using Guard Clauses</title>
        <description>&lt;p&gt;During my Rails develop process, sometimes I need to use many conditions in code and code will be a little chubbby like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish_book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_approved?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad&quot;&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publish_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is a bit unclear and unreadable. When I study in &lt;a href=&quot;https://www.codeschool.com/&quot;&gt;Code School&lt;/a&gt;, I learned about a new concept called &lt;code class=&quot;highlighter-rouge&quot;&gt;Guard Clauses&lt;/code&gt;. We can use it to replace nested conditional with Guard Clauses.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish_book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_approved?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad&quot;&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publish_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It becomes clear and readable indeed. So I recommend this way to replace nested conditional during refactoring.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 20:46:41 +0900</pubDate>
        <link>http://simcookies.github.io/2016/11/06/using-guard-clauses</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/11/06/using-guard-clauses</guid>
        
        <category>refactoring</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Experiences &amp; Feelings of RubyKaigi</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RubyKaigi&quot;&gt;RubyKaigi&lt;/a&gt; 2016 was held at Kyoto, Japan from 9/8 to 9/10. I was so lucky to get such a good chance to attend this meeting with my colleagues of &lt;a href=&quot;https://tsubaiso.jp/&quot;&gt;Tusbaiso&lt;/a&gt;. During those three days, I got many experiences. Especially, as a fresh man in area of programming and Rails Development, it was quite valuable because of broadening my horizons. So I want to write a memo about my feelings about this meeting.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;about-rubykaigi&quot;&gt;About RubyKaigi&lt;/h1&gt;

&lt;p&gt;Meeting began from 9/8, and sessions were held by English and Japanese together. Visitors can choose sessions which they are interest in. Firstly, Ruby Language Inventor, Matsumoto Yukihiro (a.k.a Matz), made the opening speech about &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2Ag8l-wq5qk&quot;&gt;Ruby3 Typing&lt;/a&gt;&lt;/em&gt;, which talked about recently change of Dynamic Programming Language and Ruby3 Typing in the future.&lt;/p&gt;

&lt;p&gt;After opening speech, there were many other excellent presentations. For example, I listened about &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lQvDd9GPSB4&quot;&gt;Fearlessly Refactoring Legacy Ruby&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UlfyX8zRVc8&quot;&gt;Deletion Driven Development&lt;/a&gt;&lt;/em&gt;. I got a deep understanding about coding and refactoring through these two sessions. Of course, other presentations were also quite excellent, I also knew some new Technology and Programming concept from those. However, for me, it just likes a flood of knowledge because of lack of basic knowledge.&lt;/p&gt;

&lt;p&gt;During these three days, we had official party, signing sessions and delicious Bentou launch. It was so unbelievable I can see and even talk to so many Ruby community committees. Many companies which using Ruby on Rails Framework from different countries and regions also showed on site. Total number of visitors, staffs and speakers almost got to 1000. Such a grand meeting!&lt;/p&gt;

&lt;h1 id=&quot;my-thinking-and-feeling&quot;&gt;My thinking and feeling&lt;/h1&gt;

&lt;h2 id=&quot;feelings-from-rubykaigi&quot;&gt;Feelings from RubyKaigi&lt;/h2&gt;

&lt;p&gt;It’s so lucky to get choice to attend Rubykaigi, such a grand meeting. I can meet so many people and know so many things which I never know if I still immersed my world. From the speechers, committers and other listeners, I can feel the big gap between them and me. &lt;strong&gt;Just like listen a talk show, but I can not get the point to laugh.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remembered some one gave a speech about &lt;strong&gt;Concurrency&lt;/strong&gt; in Ruby. He talked a lot about how to improve algorithm to speed up our code with &lt;strong&gt;Concurrency&lt;/strong&gt;, but I can not get anything at all because I have no idea about what is concurrency not to mention how to improve my code. From their code, I can see names of variables and functions, see their focus in thinking way, see tools what they are using, and compare these to mine, it just like the difference between &lt;strong&gt;Regular Army&lt;/strong&gt; and &lt;strong&gt;Miscellaneous Army&lt;/strong&gt; = =||.&lt;/p&gt;

&lt;h2 id=&quot;experiences-of-programming&quot;&gt;Experiences of programming&lt;/h2&gt;

&lt;p&gt;I began doing part-time jobs at Tusbaiso from 2015/12, as a totally fresh man in area of Web Development. So I did not have enough basic knowledges about Ruby on Rails, or it can be said I never received basic education of computer science. In fact, My major is Electronic Engineering, it includes both software and hardware. I made a lot developments in &lt;a href=&quot;https://en.wikipedia.org/wiki/Embedded_system&quot;&gt;Embedded System&lt;/a&gt;, it just needs some basic knowledge about C Language and Assembly Language.&lt;/p&gt;

&lt;p&gt;During developing of embedded system, especially of &lt;a href=&quot;https://en.wikipedia.org/wiki/STM32&quot;&gt;STM32&lt;/a&gt;, I accessed the new programming structure includes modular thinking way for STM32 official C Library.That’s my first time to notice that my code was such a mess before. Before, I wrote all initialize code in main function. After reading official references of STM32, I began to know importance of writing sub-functions and making my library. I also noticed it is important to make good names for a function and its params.&lt;/p&gt;

&lt;p&gt;Gradually, I found the beauty of software and began to learn by myself. C++, Java, Python, all of these attracted me deeply, even I did not know which is better or what’s meaning if I learn. I can use IDE such as Visual Studio, Eclipse, Code Block e.t.c. I tried to develop a small app in platform of Android. I knew the concept of Obejct-Oriented and Process-Oriented, came into contact with Linux. I made a Mini MP3 System in STM32 with uC/OS, uC/GUI and FS, which I am so pride until now.&lt;/p&gt;

&lt;p&gt;Finally, I said to others: Hei, see it! I can program! However, after enter Tusbaiso, I have no confidence to say this again, because I found: I can not program at all.&lt;/p&gt;

&lt;h2 id=&quot;struggle-in-mind&quot;&gt;Struggle in mind&lt;/h2&gt;

&lt;p&gt;Why I have no confidence now? I have asked myself many times. I can not answer. But the situation is I lack basic knowledges indeed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even I learned C Language systematically, but I still have no deep understanding about Point or I can say I never used this before.&lt;/li&gt;
  &lt;li&gt;I just know the concept of Obejct-Oriented, but still can not distinguish Class Method and Member Method.&lt;/li&gt;
  &lt;li&gt;Tranplanted OS successfully, but did not know how OS schedules tasks, how the process and thread works.&lt;/li&gt;
  &lt;li&gt;I have GitHub Account, but never read code deeply and not to mention commit some project.&lt;/li&gt;
  &lt;li&gt;I almost have no knowledge about algorithm and data structure.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one word, I have never practiced and always immersed in my own small “programming” world. When I entered Tsubaiso as a part-time job, I really felt very happy because I can do a job like a real programmer. But I realized the &lt;strong&gt;Technology’s Lack&lt;/strong&gt; was quite a problem. However I love programming, it almost becomes one part of my life. This is a contradiction to me. How to improve myself in technology and thinking ways?&lt;/p&gt;

&lt;h1 id=&quot;cheer-myself-up&quot;&gt;Cheer myself up&lt;/h1&gt;

&lt;p&gt;I want to tell myself: If I really like technology and programming, if I really want to go on with the way, I need a &lt;strong&gt;detailed plan&lt;/strong&gt;, I need to improve myself. As my opinion, the best ways to improve someone are reading, coding and writing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Yes, I need to read, not only the books of some basic concepts, but also the code other people write. Fortunately, I got some chance to read some excellent books which recommended by my colleagues. Such as &lt;strong&gt;The Art of Readable Code&lt;/strong&gt; and &lt;strong&gt;Complete Code&lt;/strong&gt;. And I have made a plan of reading for this year. If time allowed, I will make a Book Reading Part into my blog. In this part, I want to show my reading plan, and of course, write some memos. I will also focus one or two projects in GitHub. Read their code and documents. (According my level, I think one or two is enough.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I need more coding experiences to form a good programming habit. Just keeping on coding can help me find the lack of myself. Keep on maintaining my GitHub pages blog, because to use Static Pages Generator – &lt;a href=&quot;/2016/05/01/post-blogs-with-jekyll&quot;&gt;Jekyll to make a blog&lt;/a&gt; is a challenge in Front-End development. Keep using Ruby on Rails for part-time job, and also study deeply about Linux. Maybe I have no clear aims, but during process of coding, I believe I can discover it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep Writing. I know my English is so poor, = =||…Well, tell the truth, sometimes I also can not bear my grammar and pronunciation(So if you are reading this essay or other post in my blog, please forgive me, and if there are any problems you care, please feel free to &lt;a href=&quot;/about&quot;&gt;contact me&lt;/a&gt;~~). Precisely because of this, I need to improve my writing skills! I will try my best to post one blog in two weeks. The content may be about technology, my reading memo or just essay.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any way, I do not want to immerse myself in a small world anymore, I need change. Here I find a beautiful sentence, share with you, who are reading this essay and try to understanding me, thank you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Flollowing heart and intuition.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each of us has a fire in our hearts burning for something. It’s our responsibility in life to find it and keep it lit. This is your life, and it’s a short one. Don’t let others extinguish your flame. Try what you want to try. Go where you want to go. Follow your own intuition. Dream with your eyes open until you know exactly what it looks like. Then do at least one thing every day to make it a reality.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 22:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/10/11/experices-and-feelings-of-rubykaigi</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/10/11/experices-and-feelings-of-rubykaigi</guid>
        
        <category>ruby</category>
        
        <category>meeting</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Import Google Analytics into Blog</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Analytics&quot;&gt;Google Analytics&lt;/a&gt; is a freemium web analytics service offered by Google that tracks and reports website traffic. It is now the most widely used web analytics service on the Internet. You can get many information with Google analytic. For example, where is the user who visited you blog from, how long he stay at your pages and so on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;make-a-new-google-analytic-account&quot;&gt;Make a new Google Analytic account&lt;/h1&gt;

&lt;p&gt;Firstly, we need to sign up a new Google Analytic account, or just use google account. &lt;a href=&quot;https://analytics.google.com/analytics/web/?authuser=0#provision/SignUp/&quot;&gt;Here&lt;/a&gt; you can sign up a account.&lt;/p&gt;

&lt;p&gt;And then input your ID and website, after it you can get &lt;code class=&quot;highlighter-rouge&quot;&gt;Tracking ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tracking Code&lt;/code&gt;. You just need to copy and paste this JavaScript code into every webpage you want to track. Or if you miss that guide page, you also can find this code at google analytics pages here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/tracking_code.jpg&quot; alt=&quot;tracking_code&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;improt-tracking-code-to-your-blog&quot;&gt;Improt Tracking Code to your blog&lt;/h1&gt;

&lt;p&gt;Now we get the tracking code, as google said, we need to copy and paste it into every page. Of course with Jekyll Liquid Language, we do not do this. Instead of it, we should make a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_include/&lt;/code&gt; and paste JS code into analytics.html.&lt;/p&gt;

&lt;p&gt;Because every pages will apply &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; layout, so we just need to include analytics code in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layout/default.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  
  {% include analytics.html %}
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OK! After build and run you site (&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt;), you can use inspect to find analytics code in every pages of your blog!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exclude-developmet-environment&quot;&gt;Exclude developmet environment&lt;/h1&gt;

&lt;p&gt;Here is a problem: Google analytics code was included into every page, when someone visit your site, it will send necessary information to Google automaticlly. But if we run jekyll server locally, every pages will also send information. That is not we hope, because we want to get info of visitors not-self.&lt;/p&gt;

&lt;p&gt;In other word, we should just use google analytic code in production environment not development environment. By the way, the default environment of &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt; is development. So we need a judgement before include JS code. &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll.environment&lt;/code&gt; will give the answer.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  {% if jekyll.enviroment == 'production' %}
    {% include analytics.html %}
  {% endif %}
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well, now, you can inspect your site, it does not show JS code indeed. Before you public your blog, you need use &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; to specify enviroment of jekyll: &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production jekyll build&lt;/code&gt; and the JS code will be included in your blog site. You can make a sure after deploying or just use &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production jekyll server&lt;/code&gt; to make sure locally.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;summay&quot;&gt;Summay&lt;/h1&gt;

&lt;p&gt;Use Jekyll include Google Analytics Code into our blog site. This can help us to get information about our visitors. By doing this, we may see some information about both Pros and Cons, this remind us we need take some actions to improve our article writing skills, make site more valuable and readable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only good articles can attract more visitors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s try our best to be a good writer!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Blog by Michael Lee: &lt;a href=&quot;https://michaelsoolee.com/google-analytics-jekyll/&quot;&gt;Google Analytics setup for Jekyll&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Google Analytics Site: &lt;a href=&quot;https://www.google.com/analytics/&quot;&gt;https://www.google.com/analytics/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 09:20:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/10/08/import-google-analytics-into-blog</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/10/08/import-google-analytics-into-blog</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Fix Nvidia bug in Ubuntu 16.04</title>
        <description>&lt;p&gt;After I found a lot of problems with Windows 10, I installed Ubuntu 16.04 together with it. However when I finished installing it, I checked the lastest driver of Nvidia and replaced it from test to offical version, errors showed out: Driver “ebridge” was registered. So I searched online, also did as they said, but it still didn’t work. Finally, I just made a little change in it. Here is the way.&lt;/p&gt;

&lt;p&gt;Firstly, get into recovery-mode (4.4.0-21-generic), and enter to shell:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get purge nvidia*
sudo apt-get purge nvidia-settings
sudo apt-get purge nvidia-prime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Reboot, and enter Boot with new kernel version (4.4.0-23-generic). This is what they said. But I found it still showed up with the error message. So I tried to reboot and enter normal ubuntu, offcause I can not login GUI because it has not Driver, so I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+F1&lt;/code&gt; to get into login shell, input:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nvidia-current-updates
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, reboot again. OK~ It worked!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/09/27/fix-nviada-bug-ubuntu</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/09/27/fix-nviada-bug-ubuntu</guid>
        
        <category>linux</category>
        
        <category>ubuntu</category>
        
        
        <category>solution</category>
        
      </item>
    
      <item>
        <title>Begin with Rails</title>
        <description>&lt;p&gt;For a new developer of Rails, it may be a quite problem to distinguish the concepts of Ruby, Rails, rvm, gem, bundle and rake. So I want post this blog to summarize them, also summarize the steps to install Rails 4 on Linux Ubuntu 16.04.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;The name of programming language.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rails&lt;/td&gt;
      &lt;td&gt;The web develop framework mainly used ruby.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RVM&lt;/td&gt;
      &lt;td&gt;RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RubyGems&lt;/td&gt;
      &lt;td&gt;A package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries (in a self-contained format called a “gem”).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gem&lt;/td&gt;
      &lt;td&gt;A self-contained RubyGem format, you can use it directly as command-line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bundle&lt;/td&gt;
      &lt;td&gt;A kind of instance of gem, it provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed. It always binded with file named “Gemfile”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gemfile&lt;/td&gt;
      &lt;td&gt;Binded with bundle like &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rake&lt;/td&gt;
      &lt;td&gt;A simple ruby build program with capabilities similar to make.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rakefile&lt;/td&gt;
      &lt;td&gt;Rake’s version of Makefiles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;install-rails-4&quot;&gt;Install Rails 4&lt;/h1&gt;

&lt;h2 id=&quot;test-os&quot;&gt;Test OS&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux – Ubuntu 16.04&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;install-rvm&quot;&gt;Install RVM&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
~ $ \curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm -v&lt;/code&gt; to check version of RVM you installed. Like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm -v
rvm 1.27.0 (latest) by Wayne E. Seguin &amp;lt;wayneeseguin@gmail.com&amp;gt;, Michal Papis &amp;lt;mpapis@gmail.com&amp;gt; [https://rvm.io/]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-ruby-with-rvm&quot;&gt;Install Ruby with RVM&lt;/h2&gt;

&lt;p&gt;If you installed RVM successfully, you can use it to install RVM now. Firstly, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list known&lt;/code&gt; to list all versions you can install, and choose from them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm requirements # If without the step, it also included in next step.
~ $ rvm install 2.2.2 # Here you can decide which version by yourself.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here it may be take a bit long time because of downloading and complile. This installing also includes RubyGems. After it, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list&lt;/code&gt; to list all the versions you have installed. Like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm list

rvm rubies

 * ruby-2.2.2 [ x86_64 ]
 
 # =&amp;gt; - current
 # =* - current &amp;amp;&amp;amp; default
 #  * - default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use 2.2.2&lt;/code&gt; to set version of current ruby. And &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use 2.2.2 --default&lt;/code&gt; can set default version and you can use that version of ruby after openning console without setting version every time.&lt;/p&gt;

&lt;p&gt;However, when I installed rvm and use it firstly, it give me an error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm use 2.2.2 --default

RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for an example.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Why showed this error? Because when we install rvm, it will add RVM path and RVM loading line to ~/.profile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;amp;&amp;amp; source &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM into a shell session *as a function* 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But we the console which we openned is always non-login bash, it will not load the .profile. Here I give my solution:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Move the loading line to .bashrc file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we use non-login bash, it will load .bashrc, if we use login-bash, it will load .profile, and load .bashrc through:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# if running bash
if [ -n &quot;$BASH_VERSION&quot; ]; then
    # include .bashrc if it exists
    if [ -f &quot;$HOME/.bashrc&quot; ]; then
        . &quot;$HOME/.bashrc&quot;
    fi
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After this, I think it will be OK. Finally, use &lt;code class=&quot;highlighter-rouge&quot;&gt;gem -v&lt;/code&gt; to check version of Gemfile.&lt;/p&gt;

&lt;h2 id=&quot;install-bundler-and-rails-4&quot;&gt;Install Bundler and Rails 4&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundle&lt;/code&gt; to install bundler.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install rails --version=4.2.7.1&lt;/code&gt; Use &lt;code class=&quot;highlighter-rouge&quot;&gt;--version&lt;/code&gt; option to install specific rails.&lt;/p&gt;

&lt;h2 id=&quot;test-installing&quot;&gt;Test Installing&lt;/h2&gt;

&lt;p&gt;According the offical documentation &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new blog&lt;/code&gt; to make new rails project. But it will bundle install the lastest Rails and related gems automaticly, so we have to specify the version of rails which we want, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rails _4.2.7.1_ new blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is quite important point, because the gems depend with each other. When I firstly rails new a project, I use &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new blog&lt;/code&gt; directly, and just it generates a file named Gemfile, I just modify the version of rails in it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4.2.7.1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Errors will be showed when we start server. So itt’s better to spectify version.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails server&lt;/code&gt; can start server at localhost:4000, you can input this address in browser and check the main page. Here we go with Rails 4!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;surmmary&quot;&gt;Surmmary&lt;/h1&gt;

&lt;p&gt;The versions of deferent parts and install order are very important, here I made a flow figure:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install RVM –&amp;gt; use RVM install Ruby and gem –&amp;gt; use gem install bundle and Rails –&amp;gt; make project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post was writed to help new rails developer with deeper understanding about so many concepts. Also it helps me not to forget the install process. After them, enjoy developing in Rails!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Offical RVM page: &lt;a href=&quot;https://rvm.io/&quot;&gt;https://rvm.io/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Chinese install guide book: &lt;a href=&quot;https://ruby-china.org/wiki/rvm-guide&quot;&gt;https://ruby-china.org/wiki/rvm-guide&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Offical Rails guide book: &lt;a href=&quot;http://guides.rubyonrails.org/&quot;&gt;http://guides.rubyonrails.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;How to solve the problem with “RVM is not a function”: &lt;a href=&quot;http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function&quot;&gt;http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/09/04/begin-wih-rails</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/09/04/begin-wih-rails</guid>
        
        <category>rails</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Post blogs with Jekyll</title>
        <description>&lt;p&gt;Jekyll is a tool can transform plain text into static websites and blog. It’s a open source project on &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Github&lt;/a&gt;. In this blog, I will talk about how to install Jekyll and use it to generate our static blogs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;install-jekyll&quot;&gt;Install jekyll&lt;/h1&gt;

&lt;p&gt;Jekyll writed by Ruby, they pack up it as a gem, so we can use RubyGems to install it. Use command like these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
~ $ jekyll new your_site_dir
~ $ cd your_site_dir
~/your_site_dir $ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then check the localhost at port 4000 as inputing localhost:4000 at address column of browser. We will see the standard blog pages. Here we use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, it will build the project and make a server at port 4000, we can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build --destrination &amp;lt;destrination&amp;gt;&lt;/code&gt; to specify build path directly. Here you can repalce &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;destrination&amp;gt;&lt;/code&gt; to directory which you want to build. The default path is &lt;code class=&quot;highlighter-rouge&quot;&gt;./_site&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As time goes, the project will need another gems, so we can make a Gemfile to collect the gems together at root path. Here is context of Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3.2.1&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After making Gemfile, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; to install all gems we need, if we want to add some other gems, we can add into Gemfile, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; again.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;directory&quot;&gt;Directory&lt;/h1&gt;

&lt;p&gt;Because the website is static, we can modify it by CSS/HTML and JavaScript. Let’s check the directory firstly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;your_site_root_dir/
|-- README.md
|-- _config.yml
|-- Gemfile
|-- _include/
|   |-- head.html
|   |-- header.html
|   |-- footer.html
|-- _layouts/
|   |-- default.html
|   |-- page.html
|   |-- post.html
|-- _plugins/
|-- _posts/
|-- _sass/
|   |-- _base.scss
|   |-- _layout.scss
|   |-- _syntax-highlighting.scss
|-- about.md
|-- css/
|   |-- main.scss
|-- feed.xml
|-- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here I made a table to give detials about them:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File/Directory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;_config.yml&lt;/td&gt;
      &lt;td&gt;Stores configuration data. And it also can store global variables.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gemfile&lt;/td&gt;
      &lt;td&gt;I made it by myself (The lastest version Jekyll will make it for you)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_include&lt;/td&gt;
      &lt;td&gt;These are the partials that can be mixed and matched by layouts and posts to facilitate reuse.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_layouts&lt;/td&gt;
      &lt;td&gt;These are the templates that wrap posts.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_post&lt;/td&gt;
      &lt;td&gt;Our post with markdown format&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_site&lt;/td&gt;
      &lt;td&gt;The normal bulid directory, but I change it other place.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;index.html and other HTML, Markdown files&lt;/td&gt;
      &lt;td&gt;These will be build directly to the build root directory.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;other file or floder&lt;/td&gt;
      &lt;td&gt;These will also be build and included to root directory, such as css or script.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Almost all of configurations and global variables are stored in _config.yml. The format of configuration should be like &lt;code class=&quot;highlighter-rouge&quot;&gt;option: value&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;variable: value&lt;/code&gt;. For example, normally , we need config the site info, just do like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Site settings&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;description: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descripe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Social info if you want&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;twitter_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;github_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;facebook_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facebook&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Markdown seetings&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;makrdown: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;redcarpet:
  extensions:
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you set variables in _config.yml, you can use them in HTML as Liquid Language. For instance:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ github_username }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will turned into real HTML context:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;your_github_username&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For more information about Liquid language, you can check &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll offical docs site&lt;/a&gt;.
The point is, whenever you modify the _config.yml, server needs to be restarted again or &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; needs to be rebuild.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;write-post&quot;&gt;Write Post&lt;/h1&gt;

&lt;p&gt;After some basic setting, you can write your own blog now. You can use any editor to write blog at the path of &lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;, at the same time, Jekyll server can keep watch over your post and refresh the web page. Here is the point you should be care about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The extension of post file should be &lt;code class=&quot;highlighter-rouge&quot;&gt;.markdown&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;(and so on, I use &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Post filename should be write like: &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-your-blog-name.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open one post, write below code at first of file:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Your&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2016-03-21 15:35:16 +0900&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Blog&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Go on write something you want after these code. These code are provided to Jekyll for explaining some info of post. Index page can use ttile variable to show posts order by date variable, and also we can sort out posts with category and tag variables. Well, you can find more information about how to use these varibale at &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;offical page&lt;/a&gt; or I will post new blog about it, you can subscribe it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;use-markdown&quot;&gt;Use Markdown&lt;/h1&gt;

&lt;p&gt;Why we use Jekyll to write blog is beacuse we do not need to focus on HTML pages every time, just concentrate on writting. And with Markdwon, this process will be more easy and happy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; is a lightweight markup language with plain text. We just write some text, and Markdown processers help us to translate it into beautiful HTML pages. Jekyll normally supports two markdown renderers: &lt;code class=&quot;highlighter-rouge&quot;&gt;Redcarpet&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Kramdown&lt;/code&gt;, even we can also make our own markdown processors. In my blog project, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Redcarpet&lt;/code&gt;. So I make configuration like here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Here are write at _config.yml&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;markdown: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;redcarpet:
  extensions:
      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fenced_code_blocks&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_intra_emphasis&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strikethrough&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autolink&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The extensions are used normally:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fenced_code_blocks&lt;/code&gt;: This will make it easy to write code.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;no_intra_emphasis&lt;/code&gt;: Do not parse emphasis inside of words. Strings such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_bar_baz&lt;/code&gt; will not generate &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strikethrough&lt;/code&gt;: Parse strikethrough, PHP-Markdown style. Two &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; characters mark the start of a strikethrough. Such as &lt;del&gt;Text&lt;/del&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autolink&lt;/code&gt;: Parse links even when they are not enclosed in &amp;lt;&amp;gt; characters. Autolinks for the http, https and ftp protocols will be automatically detected.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tables&lt;/code&gt;: Parse tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some basic syntax rules, please have a look at &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Github Guide&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Use the jekyll to make own blog, and then we can focus on writting blogs. If we want to chage the theme of blog, we can also check &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;here&lt;/a&gt;, fork their repository. Or we can make own themes, it’s a big challenge for skills of Front-End. OK, let’s enjoy blog now.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Jekyll offical docs site: &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;https://jekyllrb.com/docs/home/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Jekyll GitHub repository souce code: &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;https://github.com/jekyll/jekyll&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Markdown processer redcarpet: &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;https://github.com/vmg/redcarpet&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Jekyll theme offical site: &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/05/01/post-blogs-with-jekyll</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/05/01/post-blogs-with-jekyll</guid>
        
        <category>jekyll</category>
        
        <category>markdown</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Mar 2016 15:35:16 +0900</pubDate>
        <link>http://simcookies.github.io/2016/03/21/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/03/21/welcome-to-jekyll</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
