<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simcookies</title>
    <description>All about Simcookies Project.</description>
    <link>https://simcookies.github.io/</link>
    <atom:link href="https://simcookies.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 05 Nov 2020 15:04:44 +0900</pubDate>
    <lastBuildDate>Thu, 05 Nov 2020 15:04:44 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>机器学习算法系列 - 决策树(序)</title>
        <description>&lt;p&gt;决策树是机器学习当中一系列非常基本的算法, 包括了常见的 ID3, C4.5, CART等等. 决策树学习是根据数据的属性采用树状结构建立的一种决策模型, 并且可以用于解决&lt;strong&gt;分类&lt;/strong&gt;和&lt;strong&gt;回归&lt;/strong&gt;的问题&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. 相对于其他的机器学习算法相比, 决策树背后的数学复杂度并不是很高, 比较容易理解.&lt;/p&gt;

&lt;h1 id=&quot;什么是决策树&quot;&gt;什么是决策树&lt;/h1&gt;

&lt;p&gt;可以通过概念去理解决策树. 假设现在要做一个”是否要出去吃午饭”的决定. 用一个图来说明:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
root[出去吃饭吗?]-- 到12点了 --&amp;gt;N1[去]
root-- 没到12点呢 --&amp;gt;N2[不去]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上就是一个非常基本的决策树. 如果加入一些更复杂的因素的话, 决策树也会变得更深. 这里假设”和小明一起去吃中华料理”, 图就可以变成这样:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
root[出去吃饭吗?] -- 到12点了 --&amp;gt;N1[看小明]
root -- 没到12点呢 --&amp;gt;N2[不去了]
N1 -- 想出去吃 --&amp;gt; N3[看附近餐馆]
N1 -- 不想出去吃 --&amp;gt; N4[不去了]
N3 -- 有中华 --&amp;gt; N5[出去吃]
N3 -- 没有中华 --&amp;gt; N6[不吃了]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从树的根部开始, 依照当前状况选择路线, 知道做出决定. 因此称之为决策树.&lt;/p&gt;

&lt;p&gt;从定义上看, 决策树是一种树状结构, 自然有树状结构的基本单位, 也就是&lt;strong&gt;节点(Node)&lt;/strong&gt;. 而节点与节点之间的连接称为&lt;strong&gt;分支 (branch)&lt;/strong&gt;. 结构的开端称为&lt;strong&gt;根 (root)&lt;/strong&gt;. 根节点之外的节点称为&lt;strong&gt;子节点 (child)&lt;/strong&gt;, 其中特殊的, 没有连接到子节点的节点称为&lt;strong&gt;叶节点 (leaf)&lt;/strong&gt;. 绘制出来就是:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
Root --&amp;gt; child1[Child]
Root --&amp;gt; child2[Leaf]
child1 --&amp;gt; child3[Leaf]
child1 --&amp;gt; child4[Leaf]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个树状结构是通过训练得到的, 而不是人为生成的. 并且决策树模型非常易于实现, 可解释性强, 也符合人的逻辑. 在决策学习的过程中, 经常会使用 Graphviz, matplotlib 加以可视化(上述的图是用 mermaid画的), 并进行加深理解以便于调整模型.&lt;/p&gt;

&lt;h1 id=&quot;决策学习的过程&quot;&gt;决策学习的过程&lt;/h1&gt;

&lt;p&gt;决策学习包括了下面三个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;特征选择&lt;/li&gt;
  &lt;li&gt;决策树生成&lt;/li&gt;
  &lt;li&gt;决策树修剪&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;特征选择&quot;&gt;特征选择&lt;/h2&gt;

&lt;p&gt;决策学习的特征选择需要决定使用哪些特征量来做判断, 也就是什么样的特征量可以用来作为树的节点以及节点的排列顺序. 训练数据集中, 属性的个数有很多, 不同的属性用于区分数据的作用有大有小. 因此特征选择的重点就在于, 找到和分类结果相关性较高的特征, 也就是分类能力强的特征.&lt;/p&gt;

&lt;p&gt;这些特征能够尽可能地分开数据, 分开的数据尽量的规整(可以说是更&lt;strong&gt;纯&lt;/strong&gt;). 一言以蔽之, &lt;strong&gt;将原本无须的数据变得更加有序.&lt;/strong&gt; 常用到的衡量指标有三个:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;信息增益 (Information Gain)&lt;/li&gt;
  &lt;li&gt;增益比率 (Gain Ratio)&lt;/li&gt;
  &lt;li&gt;基尼指数 (Gini Index)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;信息增益-information-gain&quot;&gt;信息增益 (Information Gain)&lt;/h3&gt;

&lt;p&gt;上面说了特征选择的重点在于找到分类能力强的特征量. 分类能力强指, 知道了一个特征的属性之后, 就可以最大程度上做出决定了.&lt;/p&gt;

&lt;p&gt;用上述的吃饭的例子来说, “现在的时刻”这个特征量一旦确定它是”是12点前”这个属性, 就可以做出”不去吃饭”这个决定了. &lt;strong&gt;“现在的时刻”这个特征量含有了最丰富的信息量, 知道了它的内容, 离做决定就差不多了.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那么在信息论中, 什么东西可以量化原本数据的信息量呢? 答案就是&lt;strong&gt;熵 (Entropy)&lt;/strong&gt;. 在”现在的时刻是12点前”这个条件之下信息量是&lt;strong&gt;条件熵 (Conditional Entropy)&lt;/strong&gt;. 而&lt;strong&gt;信息增益 = 熵 - 条件熵&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;信息增益大就表示, 这个特征量一旦属性确定之后, 能够消除掉很大的不确定性, 说明该特征量越重要.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样特征选择的问题就变成了”&lt;strong&gt;找到信息增益大的特征量&lt;/strong&gt;“了.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(可以跳过)&lt;/em&gt; 来看数学上的定义:&lt;/p&gt;

&lt;p&gt;假设 $X$ 是一个取有限个值的离散随机变量, 其费率分布为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(X=x_i) = p_i\qquad i=1,2,\dots,n\notag&lt;/script&gt;

&lt;p&gt;则随机变量 $X$ 的熵定义为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H(X)=-\sum_{i=1}^np_i\log p_i\notag&lt;/script&gt;

&lt;p&gt;熵越大代表随机变量的不确定性就越大.&lt;/p&gt;

&lt;p&gt;设有随机变量 $(X, Y)$ , 其联合概率分布为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(X=x_i, Y=y_j) = p_{ij}\qquad i=1,2,\dots,n; j=1,2,\cdots,m\notag&lt;/script&gt;

&lt;p&gt;条件熵 $H(Y|X)$ 表示在已知随机变量 $X$ 的条件下随机变量 $Y$ 的不确定性， 定义为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H(Y|X)=\sum_{i=1}^n p_iH(Y|X=x_1)\qquad (p_i=P(X=x_i), i=1,2,\dots,n)\notag&lt;/script&gt;

&lt;p&gt;实际计算中, 上述的两个熵都是由数据估计(最大似然估计)出来的, 因此都是经验熵. 在这两个值都都到的基础上, 可以定义信息增益. 特征 $A$ 对训练数据集 $D$ 的信息增益 $g(D, A)$ 为集合 $D$ 的经验熵 $H(D)$ 与特征 $A$ 给定条件下 $D$ 的经验条件熵 $H(D|A)$ 之差, 即&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(D,A)=H(D)-H(D|A)\notag&lt;/script&gt;

&lt;h3 id=&quot;增益比率-gain-ratio&quot;&gt;增益比率 (Gain Ratio)&lt;/h3&gt;

&lt;p&gt;如果只是用上述的信息增益的话, 会产生一个问题, 信息增益的大小是相对与一个特定的训练数据集和特征量的. 如果熵 $H(D)$ 本身就很大, 信息增益也会很大. 例如有一个ID的特征量, 因为ID本身就是独一无二的, 一旦确定之后决策也就本确定了, 单看信息增益会得到很大的值. 而原因是拥有ID的数据本来熵就很大 (就是 $H(D)$ 很大), 利用这个特征分类出来的子集的信息熵基本为0, 因此计算出来的信息增益自然很大. 但是显然这是没有意义的特征; 另外, 还有类别取值较多的特征比取值较少的特征信息增益大等问题.&lt;/p&gt;

&lt;p&gt;因此, 需要一个相对的值来进行校正, 这就导入了&lt;strong&gt;信息增益比&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_R(D,A)=\frac{g(D,A)}{H(D)}\notag&lt;/script&gt;

&lt;h3 id=&quot;基尼指数-gini-index&quot;&gt;基尼指数 (Gini Index)&lt;/h3&gt;

&lt;p&gt;上面的信息增益或者是增益比率中涉及到信息熵的运算, 因此含有大量的对数运算. 为了简化运算同时保留信息熵的特点, 引入了基尼指数 (Gini Index) 也叫基尼不纯度. 基尼不纯度的定义为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Gini(p) = \sum_{k=1}^{K}p_k(1-p_k) = 1-\sum_{k=1}^{K}p_k^2\notag&lt;/script&gt;

&lt;p&gt;$k$ 为数据集 $D$ 中类别的个数, $p_k$ 表示某种类型出现的概率. 从式子本身的意义来看, 反映了从 $D$ 中随机抽取两个样本, 其类别不一致的概率. 因此, 这个值越小表示数据的纯度越高 (不纯度越低). 数据集 $D$ 的基尼指数为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Gini(D) = 1- \sum_{k=1}^K \left(\frac{|C_k|}{|D|}\right)^2\notag&lt;/script&gt;

&lt;p&gt;而对于一个特定的特征 $A$, 假设其可以分为 $D_1$ 和 $D_2$ 两个子集, 则其基尼指数为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Gini(D, A)=\frac{|D_1|}{|D|}Gini(|D_1|) + \frac{|D_2|}{|D|}Gini(|D_2|)\notag&lt;/script&gt;

&lt;p&gt;在特征选取中, 和信息增益或者增益比不同的是, 优先选择基尼指数&lt;strong&gt;小&lt;/strong&gt;的特征. 这个值被CART算法用于生成可以决策树, 既可以产生分类也可以作为回归的模型.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;决策树生成&quot;&gt;决策树生成&lt;/h2&gt;

&lt;p&gt;有了上述的指标之后, 可以开始生成决策树. 以信息增益作为例子来看, 从根节点开始, 首先选择信息增益最大的特征作为节点特征, 然后根据特征的不同取值建立子节点. 然后再对于每个子节点进行相同的处理 (计算最大信息增益 ⇒ 建立子节点), 直到最终特征的信息增益很小 (这里需要设置一个信息增益的阈值, 以防止树变得太过于复杂) 或者没有特征可以选择为止.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;具体的构建决策树的算法有 ID3, C4.5 和 CART.&lt;/p&gt;

&lt;h3 id=&quot;id3-算法&quot;&gt;ID3 算法&lt;/h3&gt;

&lt;p&gt;输入: 训练数据集 $D$, 特征集 $A$, 阈值 $\epsilon$&lt;br /&gt;
输出: 决策树 $T$&lt;br /&gt;
步骤:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;若 $D$ 中所有实例输入同一类 $C_k$, 则 $T$ 为单节点树, 并将类 $C_k$ 作为该节点的类标记, 返回 $T$; (只有一个类的情况)&lt;/li&gt;
  &lt;li&gt;若 $A=\varnothing$ , 则 $T$ 为单节点树, 并将 $D$ 实例数最大的类 $C_k$ 作为该节点的类标记, 返回 $T$; (没有特征量的情况)&lt;/li&gt;
  &lt;li&gt;否则, 计算 $A$ 中各个特征对于 $D$ 的信息增益, 选择信息增益最大的特征 $A_g$;&lt;/li&gt;
  &lt;li&gt;如果 $A_g$ 的信息增益小于阈值 $\epsilon$, 则置 $T$ 为单节点树, 并将 $D$ 中实例数最大的类 $C_k$ 作为该节点的类标记, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;否则, 对 $A_g$ 的每一个可能值 $a_i$, 依 $A_g = a_i$ 将 $D$ 分割为若干个非空子集 $D_i$, 将 $D_i$ 中实例数最大的类作为标记, 构建子节点, 由节点及其子节点构成树 $T$, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;对于第 $i$ 个子节点, 以 $D_i$ 为训练集, 以 $A-{A_g}$ 为特征集, 递归调用步1 ~ 步5, 得到子树 $T_i$, 返回 $T_i$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;c45-算法&quot;&gt;C4.5 算法&lt;/h3&gt;

&lt;p&gt;输入: 训练数据集 $D$, 特征集 $A$, 阈值 $\epsilon$&lt;br /&gt;
输出: 决策树 $T$&lt;br /&gt;
步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;若 $D$ 中所有实例输入同一类 $C_k$, 则 $T$ 为单节点树, 并将类 $C_k$ 作为该节点的类标记, 返回 $T$; (只有一个类的情况)&lt;/li&gt;
  &lt;li&gt;若 $A=\varnothing$ , 则 $T$ 为单节点树, 并将 $D$ 实例数最大的类 $C_k$ 作为该节点的类标记, 返回 $T$; (没有特征量的情况)&lt;/li&gt;
  &lt;li&gt;否则, 计算 $A$ 中各个特征对于 $D$ 的&lt;strong&gt;信息增益比&lt;/strong&gt;, 选择信息增益比最大的特征 $A_g$;&lt;/li&gt;
  &lt;li&gt;如果 $A_g$ 的信息增益比小于阈值 $\epsilon$, 则置 $T$ 为单节点树, 并将 $D$ 中实例数最大的类 $C_k$ 作为该节点的类标记, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;否则, 对 $A_g$ 的每一个可能值 $a_i$, 依 $A_g = a_i$ 将 $D$ 分割为若干个非空子集 $D_i$, 将 $D_i$ 中实例数最大的类作为标记, 构建子节点, 由节点及其子节点构成树 $T$, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;对于第 $i$ 个子节点, 以 $D_i$ 为训练集, 以 $A-{A_g}$ 为特征集, 递归调用步1 ~ 步5, 得到子树 $T_i$, 返回 $T_i$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cart-算法&quot;&gt;CART 算法&lt;/h3&gt;

&lt;p&gt;输入: 训练数据集 $D$, 基尼指数阈值, 样本个数阈值&lt;br /&gt;
输出: 决策树 $T$&lt;br /&gt;
步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于当前节点的数据集为 $D$, 如果样本个数小于阈值或者没有特征, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;计算样本集 $D$ 的基尼系数, 如果基尼系数小于阈值, 返回 $T$;&lt;/li&gt;
  &lt;li&gt;否则, 计算当前节点现有的各个特征的各个特征值对数据集 $D$ 的基尼系数, 选择基尼系数最小的特征 $A$ 和对应的特征值 $a$, 将数据集分为两个部分 $D1$ 与 $D2$, 同时建立左右两个子节点;&lt;/li&gt;
  &lt;li&gt;对于子节点递归调用步1 ~ 步3, 得到子树 $T_i$, 返回 $T_i$.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;决策树修剪&quot;&gt;决策树修剪&lt;/h2&gt;

&lt;p&gt;经过决策树生成算法得到的决策树对于训练数据具有很高的分类准确性, 但是对于验证数据集却没有那么高. 换言之就是, 产生了过拟合现象. 如同大部分算法过拟合的原因一样, 如果再使用决策树生成算法时过多得考虑正确性的话, 就容易产生过拟合. 所以需要对产生的模型进行简化, 也就是”决策树修剪 (pruning)”: 从已经生成的树上裁掉一些子树或者叶节点.&lt;/p&gt;

&lt;p&gt;具体的实现方式就是&lt;strong&gt;极小化决策树整体的损失函数&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;(可以跳过)&lt;/em&gt; 再看公式, 首先定义决策树学习的损失函数为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_\alpha(T)=\sum_{t=1}^{|T|}N_tH_t(T)+\alpha|T|\notag&lt;/script&gt;

&lt;p&gt;其中 $T$ 表示树, $|T|$ 为其叶节点的个数, $t$ 是树 $T$ 的其中一个叶节点, 该叶节点上由 $N_t$ 个样本点, 其中属于 $k$ 类样本点的共有 $N_{tk}$ , 则&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H_t(T)=-\sum_k\frac{N_{tk}}{N_t}\log\frac{N_{tk}}{N_t}\notag&lt;/script&gt;

&lt;p&gt;表示第 $t$ 个叶子的熵. 这里的 $\alpha\geq 0$ 是惩罚系数. 将 $H_t(T)$ 带入上式:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\sum_{t=1}^{|T|}N_tH_t(T)&amp;=-\sum_{t=1}^{|T|}N_t\sum_k\frac{N_{tk}}{N_t}\log_2\frac{N_{tk}}{N_t}\\
&amp;=-\sum_{t=1}^{|T|}\sum_{k=1}^{K}N_t\log\frac{N_{tk}}{N_t}\\
&amp;=C(T)
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;这样原来的式子就成了&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_\alpha(T) = C(T)+\alpha |T|\notag&lt;/script&gt;

&lt;p&gt;$C(T)$ 的意义在于每一个叶子节点的&lt;strong&gt;熵值的加权和&lt;/strong&gt;, 如果一个节点被分到了不能再分的时候, 它的熵应该为越来越小 , 那么其熵值的加权值应该也等于越来越小. 因此, 一个树分类纯度越高, 熵值加权和 $C(T)$ 就越小. 但是于此同时, 树的复杂度变大就意味着 $|T|$ 值变大, 后一项就变大了. 整个式子 $C_\alpha(T)$ 就处在一个动态平衡的状态.&lt;/p&gt;

&lt;p&gt;极端情况下, 假设只有一个根节点的时候, 熵最大损失函数的值也会非常大. 另一种, 当树非常复杂的时候, 前一项基本为 0, 但后一项又变得非常大, 整体的损失函数也会很大. 这中间存在一个极小值的点, 使得损失函数最小. 而决策树修剪就是通过动态删减一下叶子节点, 找到这个极小值.&lt;/p&gt;

&lt;p&gt;总结树的修剪算法.&lt;/p&gt;

&lt;p&gt;输入: 生成算法产生的整个树 $T$ , 惩罚参数 $\alpha$;&lt;br /&gt;
输出: 修剪后的子树 $T_\alpha$&lt;br /&gt;
步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;计算每个节点的经验熵&lt;/li&gt;
  &lt;li&gt;利用损失函数, 递归地从树的叶节点向上回缩, 找到极小值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在实际算法使用过程中, 会留出一部分数据集作为验证数据集, 用于学习过程中的泛化性评价, 以防止出现过拟合.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这样就完成了决策树的建立. 正如一开始所说, 决策树的优点在于, 易于理解和解释, 能够使用工具进行可视化分析. 另外数据集中出现缺失值也不影响树的建立. 其缺点在于容易产生过拟合. 三个算法各自也有其缺点, 比如ID3算法计算信息增益时结果偏向数值比较多的特征等等, 这里暂时不展开.&lt;/p&gt;

&lt;p&gt;以上就是对决策树系列算法的一个简单概括, 其中很多细节的地方并不是很周到. 后续会对于 ID3, C4.5 和 CART 三个算法逐个详细解释以及基于 Python 实现.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考文章:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;李航《统计学习方法》&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/jiaoyangwm/article/details/79525237&quot;&gt;机器学习实战（三）——决策树&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://easyai.tech/ai-definition/decision-tree/&quot;&gt;决策树 – Decision tree&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/pinard/p/6053344.html&quot;&gt;决策树算法原理(下)&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;这篇文章只考虑分类的情况, 决策树回归的内容会另外整理一篇. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Nov 2020 14:50:09 +0900</pubDate>
        <link>https://simcookies.github.io/2020/11/02/summary-of-machine-learning-algorithms-decision-tree</link>
        <guid isPermaLink="true">https://simcookies.github.io/2020/11/02/summary-of-machine-learning-algorithms-decision-tree</guid>
        
        <category>algorithm</category>
        
        <category>formula</category>
        
        
        <category>machine learning</category>
        
      </item>
    
      <item>
        <title>树莓派上安装并使用 Mosquitto</title>
        <description>&lt;p&gt;在物联网设备开发中经常需要用到 MQTT 协议进行通信. MQTT 是一个基于发布 (Publish) 和 订阅 (Subscribe) 的消息协议. 位于通信中心的设备称为 MQTT broker. 其他的设备之间的消息传递都是经由这个 broker. 以前一直选择 &lt;a href=&quot;https://www.cloudmqtt.com/&quot;&gt;CloudMQTT&lt;/a&gt;, Free Trail是足够一般情况下的使用, 但是速度上存在一定的问题 (毕竟服务器在美国). 另外, 在自定义特性上面也没有那么的好.&lt;/p&gt;

&lt;p&gt;相比之下, Mosquitto 是一款开源的 MQTT broker 软件. 包括了服务端和客户端. 在实际的开发中, 经常将 broker 设置在本地. 这篇文章就记录了如何在树莓派上安装并且使用 Mosquitto.&lt;/p&gt;

&lt;h1 id=&quot;mosquitto-的安装和配置&quot;&gt;Mosquitto 的安装和配置&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里使用的树莓派中, 安装的是 Raspbian. 因为是基于 Debian 的, 使用方法基本上没有差别.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mosquitto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以了. mosquitto 作为一个服务一般都是后台运行的 (作为一个daemon), 安装成功之后就会自动开始运行了. 使用 service 查看运行状况.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service mosquitto status
● mosquitto.service - Mosquitto MQTT v3.1/v3.1.1 Broker
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/lib/systemd/system/mosquitto.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Sun 2020-09-27 15:50:35 JST&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 34min ago
     Docs: man:mosquitto.conf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
           man:mosquitto&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 Main PID: 14971 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mosquitto&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;limit: 2319&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Memory: 788.0K
   CGroup: /system.slice/mosquitto.service
           └─14971 /usr/sbin/mosquitto &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/mosquitto/mosquitto.conf

Sep 27 15:50:35 openhab systemd[1]: Starting Mosquitto MQTT v3.1/v3.1.1 Broker...
Sep 27 15:50:35 openhab systemd[1]: Started Mosquitto MQTT v3.1/v3.1.1 Broker.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面的输出的 Active 可以得到 mosquitto 运行正常. 另外通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat&lt;/code&gt; 指令查看这个服务的接口 IP 以及 Port 的状态.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-ltnp&lt;/span&gt;
Active Internet connections &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;only servers&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:1883            0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;               LISTEN      14971/mosquitto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出服务面向了所有 IP 地址, 以及使用了 1883 端口, 而这些都是 mosquitto 的默认配置.&lt;/p&gt;

&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;

&lt;p&gt;首先为了保证最基本的安全通信, &lt;strong&gt;可以为 broker 设置用户名和密码.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mosquitto_passwd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/mosquitto/passwd username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为一个叫做 username 的人生成一个相应的密码, 存储在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mosquitto/passwd&lt;/code&gt; 中. 并且在配置文件  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mosquitto/mosquitto.conf&lt;/code&gt; 中进行指定.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow_anonymous &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;password_file /etc/mosquitto/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样在之后的连接中, 就能够使用用户名 username 和密码进行登录来了. 如果并不需要用户名密码登录的话, 可以设置匿名用户登录, 这样任何设备都可以直接连接 broker 了.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow_anonymous &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;另外通过修改配置文件也可以修改开放 IP 和端口&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bind_address 0.0.0.0 &lt;span class=&quot;c&quot;&gt;# 使用 ip 地址或者主机名&lt;/span&gt;
port 1883            &lt;span class=&quot;c&quot;&gt;#开发端口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有的时候在一些特殊情况下不支持基本的 MQTT 协议, 比如 Python 或者 JavaScript 的 Paho 包, 需要使用 websockets 的协议. 同样也是在配置文件中修改.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listener 8083
protocol websockets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不同于基本的 MQTT broker, 这里相当于新建一个 websockets 协议, 8083 端口的新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;listener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;以上基本的配置就结束了. 需要注意的是, 文件末尾必须留下换行符号, 而且配置好文件之后需要重新启动 mosquitto 服务.&lt;/p&gt;

&lt;h1 id=&quot;使用-mqttbox-进行测试&quot;&gt;使用 MQTTBox 进行测试&lt;/h1&gt;

&lt;p&gt;为了测试上述的安装与配置, 以及实际的通信没有问题, 可以使用一个 &lt;a href=&quot;http://workswithweb.com/mqttbox.html&quot;&gt;MQTTBox&lt;/a&gt; 的小工具. 当然也是可以使用 mosquitto 自带的 clients 功能, 只不过没有那么可视化.&lt;/p&gt;

&lt;p&gt;最开始添加一个 MQTT Client. 填入红框中的基本参数就可以了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200927172533.png&quot; alt=&quot;Snipaste_2020-09-27_17-24-49&quot; style=&quot;zoom: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 “MQTT Client Name” 随意记入. 因为上述的配置中没有选择特殊的 websockets, 所以 Protocol 中选择 mqtt/tcp, 而不选择 ws. Host 中填入安装 mosquitto 的设备的可访问的局域网 IP 地址. 最后填入用户名和密码保存就可以了.&lt;/p&gt;

&lt;p&gt;显示连接成功的话, 就可以进行测试. 一开始 MQTTBox 会默认打开一个 publish 和一个 subscribe. 通过发布和订阅一样的 Topic (例中使用了 EdgeDevice/Status 作为 Topic) 就能测试通信了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200927173300.png&quot; alt=&quot;Snipaste_2020-09-27_17-32-04&quot; style=&quot;zoom: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左侧发布的 Payload 的内容, 右侧订阅也能收到一样的内容就表示通信没有问题.&lt;/p&gt;

&lt;h1 id=&quot;特殊的-topic&quot;&gt;特殊的 Topic&lt;/h1&gt;

&lt;p&gt;在 mosquitto 中有一些特殊的主题, 通过订阅他们可以获得当前 broker 的实时情况. 这些内容可以使用 man 手册查看 mosquitto 得到, 这里我列出两个一下个人觉得有用的.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$SYS/broker/clients/connected&lt;/td&gt;
      &lt;td&gt;当前连接着的客户端数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$SYS/broker/clients/expired&lt;/td&gt;
      &lt;td&gt;因为超过持续连接时间而中断的客户端数量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;trouble-shouting&quot;&gt;Trouble shouting&lt;/h1&gt;

&lt;p&gt;基本配置能够保证绝大部分的通信, 但比如下面 Log 中的错误.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client XXX has exceeded timeout, disconnecting.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这只是因为在 keepalive 时间内(默认15秒) 没有进行任何通信而产生的自动断开, 并不是Mosquitto的问题, 而是通信设备连接软件的问题.&lt;/p&gt;

&lt;p&gt;解决办法也很简单:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 keepalive 时间内保证通信;&lt;/li&gt;
  &lt;li&gt;在主循环中使用client.loop()方法保证通信.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 27 Sep 2020 15:53:04 +0900</pubDate>
        <link>https://simcookies.github.io/2020/09/27/mosquitto-mqtt-on-raspberry-pi</link>
        <guid isPermaLink="true">https://simcookies.github.io/2020/09/27/mosquitto-mqtt-on-raspberry-pi</guid>
        
        <category>mqtt</category>
        
        <category>raspberrypi</category>
        
        <category>server</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>使用 PicGo 与 Github 为 Typora 搭建图床</title>
        <description>&lt;p&gt;一直使用 Markdown 编辑器 &lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;, 因为除了最基本的 Markdown 语法之外, 他还非常好地支持了 LaTex 公式以及 Mermaid 图表库. 但是之前一直有些在意的地方就是 Typora 的图片存放位置的问题. 之前的版本支持复制到当前文件夹或者其他指定文件夹, 但是这样就导致了, 每次同步或者拷贝某一个 md 文档的时候, 要带着这个图片文件夹一起”跑”, 感觉总是怪怪的.&lt;/p&gt;

&lt;p&gt;从版本 0.9.84 开始忽然收到更新通知, 开始支持图片上传功能了(通过 PicGo 或者其他自定义命令)! 在这里我就用了官方推荐的 &lt;strong&gt;PicGo 加上 Github 仓库的方案&lt;/strong&gt;尝试了一段时间, 感觉确实不错. 图片可以存放在一个地方, 而且每次移动文档时也不用担心其中的图片丢失链接了. 这篇文章里, 我想大概总结一下这个方案的做法.&lt;/p&gt;

&lt;h1 id=&quot;github-设置&quot;&gt;Github 设置&lt;/h1&gt;

&lt;p&gt;可以新建或者用现有的仓库&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 这个仓库就是用来存放未来所有上传上来的图片的, 当作云存储来用的感觉. 这里的仓库名称和 branch 名称留以备用.&lt;/p&gt;

&lt;p&gt;另外为了让 PicGo 能够上传图片至 Github, 需要给予其访问权限, 这里 PicGo 采用的就是 token. 在 Github 设置的地方新建一个 token 备用.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200628000404.png&quot; alt=&quot;image-20200628000403915&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;下载安装-picgo&quot;&gt;下载安装 &lt;a href=&quot;https://molunerfinn.com/PicGo/&quot;&gt;PicGo&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;安装好之后的 PicGo 长成这个样子&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200627235009.png&quot; alt=&quot;image-20200627235009023&quot; /&gt;&lt;/p&gt;

&lt;p&gt;开始对 Github 图床进行设置, 把上面所提到的仓库名, 分支名, Token 都填上 (有需要的话, 仓库中的存储目录也是可以指定的), 基本上就算是结束了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200628001038.png&quot; alt=&quot;image-20200628001038711&quot; /&gt;&lt;/p&gt;

&lt;p&gt;个人习惯性会将图片的名称全部自动改为日期之后上传, 正好 PicGo 自带了这样的设置 (其他设置可自由折腾):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200628001409.png&quot; alt=&quot;image-20200628001409831&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了这里, PicGo 自身已经可以用来上传图片了. 在上传区中”点击上传”或者”拖拽文件上传”都可以实现上传图片到 Github. 而 Github 仓库里面也能够看到传过来的图片了. 最后开始设置 Typora.&lt;/p&gt;

&lt;h1 id=&quot;typora-连接-picgo&quot;&gt;Typora 连接 PicGo&lt;/h1&gt;

&lt;p&gt;在偏好设置 &amp;gt; 图像里面选择: 插入图片时上传图片, 并且设置上传服务为 PicGo(App) 并且指定一下 PicGo 的安装路径. 最后可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;验证图片上传选项&lt;/code&gt; 来查看效果, 会返回上传成功的 JSON 消息.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200628001949.png&quot; alt=&quot;image-20200628001949008&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20200628002355.png&quot; alt=&quot;image-20200628002355088&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时, 在 Github 的图床里面会多出来两张 Typora 的 logo. 至此, 所有的设置都完成了, 再次向 Typora 中插入或者直接拷贝图片的时候, 便会自动触发 PicGo 自动上传图片到 Github 功能. 加上 OneDrive, 一个本地的 Markdown 编辑器 Typora 彻底变成了一个方便易用的云端笔记工具 (真的推荐 Latex 公式功能) :smiley:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;这个代码仓库必须要是 public 性质的才能在各个地方都能够被访问到. 这里涉及到了图片访问权限的问题, 所以请针对情况使用. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;其中图床设置的地方应当有很多项, 但是因为其他项暂时都用不到, 所以都关闭了 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 23:21:01 +0900</pubDate>
        <link>https://simcookies.github.io/2020/06/27/make-image-host-service-for-typora-with-picgo-and-gihub</link>
        <guid isPermaLink="true">https://simcookies.github.io/2020/06/27/make-image-host-service-for-typora-with-picgo-and-gihub</guid>
        
        <category>typora</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Summary of Machine Learning Algorithms -- Support Vector Machine</title>
        <description>&lt;p&gt;&lt;strong&gt;Support Vector Machine&lt;/strong&gt; (SVM) has become a more and more popular algorithm in the field of ML, even some times more than &lt;strong&gt;Neural Network&lt;/strong&gt; (NN). It is widely used for classification and regression. So, in this post I will give a brief about the SVM.&lt;/p&gt;

&lt;h1 id=&quot;brief-introduction&quot;&gt;Brief Introduction&lt;/h1&gt;

&lt;p&gt;SVM is a kind of supervised learning method, it has good performance for classification problems. And it is a non-probabilistic way of learning, which means it can can directly get the result of the classification instead of the probability of the class which it belongs to (like logistic regression). In addition, the support of the “&lt;strong&gt;Nuclear Function&lt;/strong&gt;” in SVM also makes it have a wider range of use. The concept of “nuclear function” is also used in other classification learning methods.&lt;/p&gt;

&lt;h1 id=&quot;support-vector-machine&quot;&gt;Support Vector Machine&lt;/h1&gt;

&lt;p&gt;First, let’s say we have two types of data, one positive type and one negative type. Features have two dimensional data: $\vec{x} = (x_1, x_2)$, which can be plotted like below (Orange for positive data and blue for negative data):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144404.png&quot; alt=&quot;SVM original dataset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we want to draw a line to separate the two types of data. There are three lines to choose from below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144443.png&quot; alt=&quot;SVM with different classfication lines&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously, the middle (b) is the best way to separate the data. So how can we count the “most able to” separate the data? We can assume a hyperplane which divide dataset into two classes. And this plane has as longer distance as possiable to all the two kinds of data. We call it **separating hyperplane **(or decision boundray). Equation for hyperplane (here is the line (b) in the figure):
&lt;script type=&quot;math/tex&quot;&gt;\vec w\cdot \vec x + b=0&lt;/script&gt;
$\vec w$ is the vector perpendicular to the hyperplane. The magnitude of $\vec w$ is unkown. $\vec x$ are the vectors on the hyperplane. $b$ is bias.&lt;/p&gt;

&lt;p&gt;For negative objects:
&lt;script type=&quot;math/tex&quot;&gt;\vec w\cdot \vec x_- + b\leq1&lt;/script&gt;
For positive objects:
&lt;script type=&quot;math/tex&quot;&gt;\vec w\cdot \vec x_+ + b\geq1&lt;/script&gt;
The thing what we want to do is &lt;strong&gt;very easy&lt;/strong&gt;,  it just is checking the result of:
&lt;script type=&quot;math/tex&quot;&gt;\text{sgn}(\vec w\cdot\vec x+b)&lt;/script&gt;
If it’s plus then it belongs to positive class, otherwise it belongs to negitive class.&lt;/p&gt;

&lt;p&gt;The big problem is how to find the unknow $\vec w$ and $b$. We can select two parallel hyperplanes that separate the two classes of data, so that the distance between them is as large as possible. The distance between these hyperplanes is called &lt;strong&gt;margin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The two hyperplanes can be described by:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec w\cdot \vec x_i + b=1 \\
\vec w\cdot \vec x_i + b=-1&lt;/script&gt;

&lt;p&gt;Here is another example (Red for positive and blue for negative).  The two gray lines are the margin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144506.png&quot; alt=&quot;svm_margin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If $y_i$ presents the class of $i$-th piece of data, 1 for positive and -1 for negitive, then the two equations can be written into one:
&lt;script type=&quot;math/tex&quot;&gt;y_i(\vec w \cdot \vec x_i + b) =1&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Those vectors in the plane are called &lt;strong&gt;support vector&lt;/strong&gt;. The width between two hyperplanes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\text{Width} &amp;= (\vec x_+-\vec x_-)\cdot \frac{\vec w}{||\vec w||} \notag\\
&amp;=(\vec w\cdot\vec x_+-\vec w\cdot\vec x_-)\cdot \frac{1}{||\vec w||} \notag\\
&amp;=(1-b+1+b)\cdot \frac{1}{||\vec w||} = \frac{2}{||\vec w||}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The thing what we want to do is maxmum the width:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{max Width}\to\text{max}\frac{2}{||\vec w||} \to \text{min}||\vec w||\to\text{min}\frac{1}{2}||\vec w||^2&lt;/script&gt;

&lt;p&gt;Now the problem becomes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{min} \frac{1}{2}||\vec w||^2, s.t., y_i(\vec w \cdot \vec x_i + b) -1\geq0, i = 1,2\dots,n&lt;/script&gt;

&lt;p&gt;This problem can be solved by &lt;strong&gt;Lagrange multiplier&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L(\vec w, b, \alpha) = \frac{1}{2}||\vec w||^2-\sum_{i=1}^{n}\alpha_i\left[y_i(\vec w\cdot\vec x_i + b)-1\right]&lt;/script&gt;

&lt;p&gt;Now we need know partial difference $L$ with respect to $\vec w$ and $b$ and let them equal to 0:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial{L}}{\partial \vec w_i} &amp;= \vec w - \sum_{i=1}^{n}\alpha_i y_i \vec x_i = 0\notag\\
\frac{\partial{L}}{\partial b} &amp;= - \sum_{i=1}^{n}\alpha_i y_i  = 0
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;We got the $\vec w$, and bring it back to the Largrange muptiplier:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
L(\vec w, b, \alpha) &amp;= \frac{1}{2}\left(\sum_{i=1}^n\alpha_iy_i\vec x_i\right)^2-\sum_{i=1}^n\alpha_iy_i\vec x_i\left(\sum_{i=1}^n\alpha_iy_i\vec x_i\right)-\sum_{i=1}^n\alpha_iy_ib+\sum_{i=1}^n\alpha_i\notag\\
&amp;=\frac{1}{2}\sum_{i=1}^{n}\sum_{j=1}^n\alpha_i\alpha_jy_iy_j\vec x_i\vec x_j-\sum_{i=1}^n\sum_{j=1}^n\alpha_i\alpha_jy_iy_j\vec x_i \vec x_j - b\sum_{i=1}^n\alpha_iy_i+\sum_{i=1}^n\alpha_i\notag\\
&amp;=\sum_{i=1}^n\alpha_i-\frac{1}{2}\sum_{i=1}^{n}\sum_{j=1}^n\alpha_i\alpha_jy_iy_j\vec x_i\vec x_j
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;This is a quadratic problem. The most popular way to solve the problem is sequential minimal optimization, &lt;strong&gt;SMO&lt;/strong&gt;(Microsoft).&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 10:10:42 +0900</pubDate>
        <link>https://simcookies.github.io/2018/12/02/support-vector-machine</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/12/02/support-vector-machine</guid>
        
        <category>algorithm</category>
        
        <category>formula</category>
        
        
        <category>machine learning</category>
        
      </item>
    
      <item>
        <title>Summary of Machine Learning Algorithms -- Linear Regression</title>
        <description>&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt; is one class of problems in Machine Learning. Linear Regression is a basic one class of problems of Regression. I want to write a note about the Linear Regression in this post as the beginning of Machine Learning series.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;brief-introduction&quot;&gt;Brief Introduction&lt;/h1&gt;

&lt;p&gt;Regression problems want to find the relationship between the input variables and output variables. The &lt;em&gt;Regression&lt;/em&gt; was used from a 19th-Century scientist.
&lt;em&gt;Linear Regression&lt;/em&gt; is most basic problems of Regression. We want to make a model to describe the relationship between input and output.
So let’s assume the input variables are $x_1, x_2, \dots , x_n$, and the output variable is $y$. This formula shows the linear relationship between them:
&lt;script type=&quot;math/tex&quot;&gt;y=m_1x_1+m_2x_2 + \dots+m_nx_n+b=m^Tx+b&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Here, $m_i$ is coefficient. The $m = (m_1, m_2, \dots, m_n)$ and $x = (x_1, x_2, \dots, x_n)$ are vectors, the $b$ calls bias. We have the model now, what we want to do next is to find the $m$ and $b$ with given &lt;strong&gt;dataset&lt;/strong&gt; and then, we can use the model to make some prediction of some unknown data.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;the-case-of-2-dimension&quot;&gt;The case of 2-dimension&lt;/h1&gt;

&lt;p&gt;For the 2-dimension (one input variable $x$ with one output variable $y$), we can get $m$ and $b$ easily. The model formula becomes $y=mx+b$ which is a very simple line and we call it the &lt;em&gt;best fit line&lt;/em&gt;. &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is the best fit line slope and $b$ is best fit line y-intercept.&lt;/p&gt;

&lt;p&gt;Now, we have one dataset with $(x^{(1)}, y^{(1)}), (x^{(2)}, y^{(2)}), \dots, (x^{(m)}, y^{(m)})$. Here is the plot of them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144249.png&quot; alt=&quot;dataset of linear regression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can get $m$ and $b$ quite easily with these formulas (from &lt;strong&gt;statistics&lt;/strong&gt;):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
m&amp;=\frac{\overline x \overline y - \overline{xy}}{\overline x^2 - \overline {x^2}} \\
b&amp;=\overline y - m\overline x
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;After this, we can draw the best fit line as blue line, which is also our model. According this line, we can make prediction of $x=40$ which plot as red point:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144312.png&quot; alt=&quot;linear regression prediction&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;for-the-generalized-case&quot;&gt;For the generalized case&lt;/h1&gt;

&lt;p&gt;For the generalized case, $m$ is a vector. So we cannot get it easily just with those formulas upper. Now assume the $h(x)$ is the &lt;strong&gt;Hypothesis&lt;/strong&gt; model:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h(x^{(i)})=m^Tx^{(i)}+b&lt;/script&gt;

&lt;p&gt;We can use a &lt;strong&gt;cost function&lt;/strong&gt; – &lt;strong&gt;Mean Squared Error&lt;/strong&gt; (MSE) to evaluate this model:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(m, b) = \frac{1}{2n}\sum_{i=1}^n\left[h(x^{(i)})-y^{(i)}\right]^2&lt;/script&gt;

&lt;p&gt;$1/2n$ here is just for calculating convenience. What we need to do it to find the $m$ and $b$ to minimize the MSE which also means the line we made is as close as possible to those dataset points:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_{m, b}J(m,b)&lt;/script&gt;

&lt;p&gt;Now the &lt;strong&gt;Find unknown $m$ and $b$&lt;/strong&gt; becomes &lt;strong&gt;Find the min value of $J$, and get $m$ and $b$&lt;/strong&gt;. This problem can be solved by &lt;strong&gt;Gradient Descent&lt;/strong&gt; (which I want to give a another post to give some details).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;evaluation-metrics&quot;&gt;Evaluation Metrics&lt;/h1&gt;

&lt;p&gt;Finally, after we get the value of $m$ and $b$, we will get the hypothesis model. Usually, we use &lt;strong&gt;Coefficient of determination&lt;/strong&gt; (witch also calls $\text{R}^2$) to evaluate this model.&lt;/p&gt;

&lt;p&gt;Firstly, define the &lt;strong&gt;residuals&lt;/strong&gt; as $e^{(i)} = y^{(i)} - h(x^{(i)})$, and &lt;strong&gt;mean&lt;/strong&gt; of the data as $\overline{y}$, then define these sums of squares:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The total sum of squares (proportional to the variance of the data):&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;SS_{\text{tot}} = \sum_i(y^{(i)} - \overline y)^2&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The regression sum of squares, also called the explained sum of squares:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;SS_{\text{reg}} = \sum_i(h(x^{(i)}) - \overline y)^2&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The sum of squares of residuals, also called the residual sum of squares:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;SS_{\text{res}} = \sum_i(y^{(i)} - h(x^{(i)}))^2 = \sum_i(e^{(i)})^2&lt;/script&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lastly, define the coefficient of determination.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{R}^2 = \frac{SS_{\text{reg}}}{SS_{\text{tot}}} = 1- \frac{SS_{\text{res}}}{SS_{\text{tot}}}&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;The better the linear regression fits the data in comparison to the simple average, the closer the value of $\text{R}^2$ is to 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;practice-corner&quot;&gt;Practice corner&lt;/h1&gt;

&lt;p&gt;For the 2-D case, it’s quite easy to achieve that:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;statistics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;best_fit_slope_and_intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# train dataset
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best_fit_slope_and_intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;regression_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prediction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;predict_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predict_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# data visualization
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regression_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predict_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For generalized case, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; package. here is the code sketch:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.linear_model&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prepare some train dataset and test dataset
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;clf.score&lt;/code&gt; will return the value of coefficient of determination $\text{R}^2$.&lt;/p&gt;

&lt;p&gt;In fact, the data preprocess is quite important step, it includes data cleaning and feature selection.
That’s a big topic, so I want to make another post to give details.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot;&gt;Linear Regression (Wiki)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://pythonprogramming.net/regression-introduction-machine-learning-tutorial/&quot;&gt;pythonprogramming.net&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 21 Sep 2018 14:53:00 +0900</pubDate>
        <link>https://simcookies.github.io/2018/09/21/summary-of-machine-learning-linear-regression</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/09/21/summary-of-machine-learning-linear-regression</guid>
        
        <category>algorithm</category>
        
        <category>formula</category>
        
        
        <category>machine learning</category>
        
      </item>
    
      <item>
        <title>Draw UML with PlantUML in Atom</title>
        <description>&lt;p&gt;I want to use UML to help me understanding how Jekyll works, so I found &lt;a href=&quot;http://plantuml.com/&quot;&gt;PlantUML&lt;/a&gt;. It’s an open source tool which can draw UML pictures quickly. In this post, I will config PlantUML into &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;install-atom&quot;&gt;Install Atom&lt;/h1&gt;
&lt;p&gt;Just download the Atom and install it.&lt;/p&gt;

&lt;h1 id=&quot;install-java&quot;&gt;Install Java&lt;/h1&gt;
&lt;p&gt;Java runtime environment is necessary because PlantUML is written in Java. Check if Java is installed in your PC or *nix by &lt;code class=&quot;highlighter-rouge&quot;&gt;java --version&lt;/code&gt;. If Java is installed, it will return messages like:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java 9.0.1
Java&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 9.0.1+11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 9.0.1+11, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-graphviz&quot;&gt;Install graphviz&lt;/h1&gt;
&lt;p&gt;Graphviz is a package of open-source tools for drawing graphs with &lt;strong&gt;dot language&lt;/strong&gt; script. It is used by PlantUML to draw UML graphs. In Mac, you can install it by brew.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;graphviz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can type &lt;code class=&quot;highlighter-rouge&quot;&gt;dot -V&lt;/code&gt; in the bash command line to check if it was installed successfully.&lt;/p&gt;

&lt;h1 id=&quot;check-installation-of-java-and-graphviz&quot;&gt;Check installation of Java and graphviz&lt;/h1&gt;
&lt;p&gt;Official site provide a way to check if the environment of PlantUML is ready or not. First download &lt;a href=&quot;https://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar&quot;&gt;plantuml.jar&lt;/a&gt; and then type &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar plantuml.jar -testdot&lt;/code&gt;. If each installation is OK, it will say: &lt;code class=&quot;highlighter-rouge&quot;&gt;Installation seems OK. File genration OK.&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;install-plugins-of-atom&quot;&gt;Install plugins of Atom&lt;/h1&gt;
&lt;p&gt;There are two plugins necessary for using PlantUML in Atom.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;languange-plantuml&lt;/li&gt;
  &lt;li&gt;plantuml-preview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/language-plantuml&quot;&gt;Language-plantuml&lt;/a&gt; provide syntax highlight or autocomplete.
&lt;a href=&quot;https://atom.io/packages/plantuml-preview&quot;&gt;plantuml-preview&lt;/a&gt; will create UML diagrams and display it. It also updates on save.
You can install these two packages with &lt;code class=&quot;highlighter-rouge&quot;&gt;apm&lt;/code&gt; or directly install them in Atom GUI.&lt;/p&gt;

&lt;p&gt;After installation, plantuml-preview needs some configurations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144103.png&quot; alt=&quot;setting_of_plantuml&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Graphviz Dot Executable&lt;/strong&gt;: The path of dot which you get it by &lt;code class=&quot;highlighter-rouge&quot;&gt;which dot&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Additional PlantUML Arguments&lt;/strong&gt;: It’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-jar&lt;/code&gt; with default value.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PlantUML Jar&lt;/strong&gt;: The file you have downloaded before, and put it at some where.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java Executable&lt;/strong&gt;: Default is &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; if you can run java in command line directly. If not, use &lt;code class=&quot;highlighter-rouge&quot;&gt;which java&lt;/code&gt; to find the path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;write-plantuml-code&quot;&gt;Write PlantUML code&lt;/h1&gt;
&lt;p&gt;Congrulations! We have done all the preparation, and now we can write PlantUML code at Atom. The extension can be &lt;code class=&quot;highlighter-rouge&quot;&gt;.pu&lt;/code&gt;. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@startuml
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The shortcut key &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Option + p&lt;/code&gt; can preview the UML diagrams.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144141.png&quot; alt=&quot;demo_of_plantuml_in_atom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK! It’s done! Enjoy it~ :tada:&lt;/p&gt;

</description>
        <pubDate>Sat, 05 May 2018 14:23:16 +0900</pubDate>
        <link>https://simcookies.github.io/2018/05/05/draw-uml-with-plantuml-in-atom</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/05/05/draw-uml-with-plantuml-in-atom</guid>
        
        <category>plantUML</category>
        
        <category>atom</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Source code reading of Jekyll -- 1</title>
        <description>&lt;p&gt;It has been long time since I wanted to study Ruby by reading source code of some project from some open source project. I choosed the Jekyll because it’s small and popular in static pages generator. It is my first time to read source codes, I will choose the appropriate way for me. It you have any advices for me, please feel free to reply this article.&lt;/p&gt;

&lt;p&gt;I plan to begin from files at root dir, and then go on directories. Finally, return root dir and make a summary of this project.&lt;/p&gt;

&lt;h1 id=&quot;jeykllgemspec&quot;&gt;jeykll.gemspec&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gemspec&lt;/code&gt; includes basic infos of the Jekyll project. It is necessary in a RubyGem project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/version&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Load the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; dir into built-in var &lt;code class=&quot;highlighter-rouge&quot;&gt;$LOAD_PATH&lt;/code&gt; and require &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/version.rb&lt;/code&gt; which includes version info of Jekyll. &lt;code class=&quot;highlighter-rouge&quot;&gt;File.expand_path&lt;/code&gt; converts a pathname to an absolute pathname. &lt;code class=&quot;highlighter-rouge&quot;&gt;unshift&lt;/code&gt; can prepend objects to the front of self.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;all_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git ls-files -z`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_runtime_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;addressable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 2.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use ` ` to execute a shell script, the script here can get all files under the management of git.
&lt;code class=&quot;highlighter-rouge&quot;&gt;s.bindir = &quot;exe&quot;&lt;/code&gt; specify the executable ruby script in &lt;code class=&quot;highlighter-rouge&quot;&gt;exe/&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;add_runtime_dependency&lt;/code&gt; adds a runtime dependency named gem with requirements to this gem.&lt;/p&gt;

&lt;p&gt;We can install Jekyll by &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;, and gem will create a exculatable ruby script in &lt;code class=&quot;highlighter-rouge&quot;&gt;gems/ruby-2.X.X/bin&lt;/code&gt;. Implement in console of &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;exe/jekyll&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exejekyll&quot;&gt;exe/jekyll&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Execulatable ruby script which defined in jekyll.gemspec.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Normally &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; does not write immediately to &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, but this can write every single character immediately to the console&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is very useful when build websocket server.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PluginManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require_from_bundler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Call the &lt;code class=&quot;highlighter-rouge&quot;&gt;require_from_bundler&lt;/code&gt; method which defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/plugin_manager.rb&lt;/code&gt;. In fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;jekyll&quot;&lt;/code&gt; will load jekyll.rb file, and all other modules are loaded in this file by &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload :XXX, &quot;jekyll/xxx&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deprecator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method will deal with arguments deprecated which defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/deprecator.rb&lt;/code&gt;. It will show the error messages and abort calling.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mercenary&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mercenary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/mercenary&quot;&gt;Mercenary&lt;/a&gt; is lightweight and flexible library for writing command-line apps in Ruby which is also a sub-repo of Jekyll. This gem may be useful in development of gem.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subclasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init_with_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initilization of Jekyll commands in block of Mercenary. These commands are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll/command.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll.logger&lt;/code&gt; is using to manage logs.&lt;/p&gt;

&lt;h1 id=&quot;libjekyllrb&quot;&gt;lib/jekyll.rb&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Require necessary libs to this project in lib/jekyll.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As it said of comment, this method requires all of the Ruby files in the given directory.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# internal requires&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Cleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/cleaner&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# extensions&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll/plugin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/jekyll.rb&lt;/code&gt; requires &lt;code class=&quot;highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;, stdlib and 3rd party libs firstly. Also it will claim its own modules using &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; opens up &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;’s singleton class, so that methods can be redefined for the current &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; object. With this syntax, we don’t need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;def self.some_method&lt;/code&gt; in the module everytime.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There are such a set of methods defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# jekyll environment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# configuration Hash by merging the default options with anything in _config.yml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_timezone&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Set the TZ environment variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# logger instance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# set logger writer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sites&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# Jekyll sites created&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sanitized_path&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Returns the sanitized path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Stackoverflow: &lt;a href=&quot;https://stackoverflow.com/questions/29998728/what-stdout-sync-true-means&quot;&gt;What STDOUT.sync = true means?&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;About the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;, reference is &lt;a href=&quot;https://stackoverflow.com/questions/804297/when-to-use-require-load-or-autoload-in-rubyutm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;here&lt;/a&gt;. And I plan to write an another article about this. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Stackoverflow: &lt;a href=&quot;https://stackoverflow.com/questions/2505067/class-self-idiom-in-rubyutm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;class « self idiom in Ruby&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 15:27:12 +0900</pubDate>
        <link>https://simcookies.github.io/2018/04/04/source-code-reading-of-jekyll-1</link>
        <guid isPermaLink="true">https://simcookies.github.io/2018/04/04/source-code-reading-of-jekyll-1</guid>
        
        <category>source</category>
        
        <category>jekyll</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>'Web Full-stack develop reference'</title>
        <description>&lt;p&gt;I finished reading the book of &lt;em&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web Full-stack Develop Reference&lt;/a&gt;&lt;/em&gt; at one weekend&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. As writing in the book, it focuses on the principles, general methods and tools of Web developing, not a specific programming language. The first half of the book’s content is mainly introduced the basic knowledge of the Web includes the three elements of the web page elements – HTML, CSS, JavaScript, so I just looked through it. I focused on reading the third chapter – Programming Languages and Technologies. Besides, I made some others related researches about it and write a new post as below. (It’s terriable to write in English:joy:)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dynamic-content-some-ways-for-server-programming&quot;&gt;(Dynamic content) Some ways for Server Programming&lt;/h1&gt;

&lt;h2 id=&quot;common-gateway-interface-cgi&quot;&gt;Common Gateway Interface, CGI&lt;/h2&gt;

&lt;p&gt;Although no one is using it today basically, the mainstream Web server still supports it. Here are the processing steps of it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User’s requests are sent to the server through the Internet.&lt;/li&gt;
  &lt;li&gt;The server sends the received request to the CGI program for processing.&lt;/li&gt;
  &lt;li&gt;CGI program passes the results to the server.&lt;/li&gt;
  &lt;li&gt;The server sends the responses to users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While CGI handles one process for per request, so CGI is not a good choice for lots of requests that consume a lot of resources.&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h2 id=&quot;java-servlet&quot;&gt;Java (Servlet)&lt;/h2&gt;

&lt;p&gt;Java Servlet just provides servers for Java. Here is it’s processing steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User’s requests are sent to the server through the Internet.&lt;/li&gt;
  &lt;li&gt;The server starts and calls Servlet.&lt;/li&gt;
  &lt;li&gt;Servlet processes according to user’s requests and passes the results to the server.&lt;/li&gt;
  &lt;li&gt;The server sends the responses to users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Java Servlet handles one thread for per request which is different from CGI, so it has better performance than CGI (If you want to know more about this, please read this &lt;a href=&quot;http://www.c4learn.com/java/servlet/servlet-vs-cgi/&quot;&gt;reference&lt;/a&gt;. In fact, we use more frameworks such as &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; instead of using Java Servlet directly.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Python mainly depends on the WSGI (Web Server Gateway Interface) specification on the server side. This specification defines the main interface between the server and the application.&lt;/p&gt;

&lt;p&gt;There is a Middleware concept in WSGI: after the server receives the request, the middleware responds firstly, and then send to the next level which may be an application or another middleware. Simply say, it adds one or more middlewares which can achieve log or handle errors between the server and the application.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;Ruby is the programming language which I am always using. Rack specification defines the interface between the server and the Ruby application which is similar to WSGI in Python. I never heard about Rack even I am using Ruby on Rails (it is based on Rack :cold_sweat:). As WSGI in Python, Rack also has the concept of middleware.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;nodejs&quot;&gt;Node.js&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;server-architecture&quot;&gt;Server architecture&lt;/h1&gt;

&lt;p&gt;I was vague about this concept before, but I got a rough outline after reading the book. I will sort out various concepts includes well known Apache, Nginx or IIS.&lt;/p&gt;

&lt;h2 id=&quot;basic-situation&quot;&gt;Basic situation&lt;/h2&gt;

&lt;p&gt;If the site’s traffic is not a lot, we can put the server directly on the network. Here is an instance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102143913.png&quot; alt=&quot;basic instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web server here may be Apache HTTP Server, Nginx, Microsoft’s IIS and so on; dedicated Servlet which I said above, it just provides servers for Java; and the web server embedded in Node.js.&lt;/p&gt;

&lt;h2 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h2&gt;

&lt;p&gt;In general, one Web Server for one website is not enough, we need a group of servers. The load balancer accepts the HTTP request and distributes it to the internal web server. There is a well-known load balancer named &lt;a href=&quot;https://en.wikipedia.org/wiki/HAProxy&quot;&gt;HAProxy&lt;/a&gt;, the Apache, Nginx which I said above can also act as a load balancer.&lt;/p&gt;

&lt;h2 id=&quot;specifi-analysis&quot;&gt;Specifi analysis&lt;/h2&gt;

&lt;p&gt;I often hear the Web Server Architecture composed of Nginx + Passenger + Ruby on Rails or Apache + Unicorn + Ruby on Rails, here are the details explanations for each link:&lt;/p&gt;

&lt;p&gt;Nginx or Apache is the load balancer and also the web server, which responds to client requests and sends them to the application. Unicorn is an HTTP server for Ruby. It will load the Ruby application in its own process space, and the package HTTP contents outside and communicate with Ruby application. Unicorn is easy to debug, and it’s applied to manage Rack application. Some other server such to Thin, Puma is similar as Unicorn. And Passenger is a bit special, it’s directly integrated into Nginx and Apache and becomes the module which they can use directly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From Wikipedia
Phusion Passenger (informally also known as mod_rails and mod_rack among the Ruby community) is a free web server and application server with support for Ruby, Python and Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Passenger can also manage the number of Rails processes, life cycles, request queues and so on. This fig can help you to understand the relationship between them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/simcookies/image-host/master/imgs/20201102144000.png&quot; alt=&quot;server analysis&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;refferences&quot;&gt;Refferences&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://fujiike.hateblo.jp/entry/2015/08/20/170751&quot;&gt;ApacheとNginxとPassengerとUnicornの違い【すごい初心者向け】&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options&quot;&gt;Ruby on Rails Server options&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/coin8086/getfullstack/details&quot;&gt;Web全栈技术指南&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Strictly speaking, it is only the author’s own summary of the Gitbook. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I am not very understanding for PHP, after all, I am an ‘entery level’ player. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;I want to write an another post to introduce WSGI and Rack. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Still in studying process, I may write a new post about it after it~ &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 02 Dec 2017 15:49:44 +0900</pubDate>
        <link>https://simcookies.github.io/2017/12/02/fullstack-reference</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/12/02/fullstack-reference</guid>
        
        <category>ruby</category>
        
        <category>python</category>
        
        <category>server</category>
        
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Rails error of 'key must be 32 bytes'</title>
        <description>&lt;p&gt;I made a Rails Application with Rails 5.0.0.1, and got an strange error when I run the server by localhost.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ArgumentError in WelcomeController#index
	key must be 32 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And details are here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Extracted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#72):&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cipher&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@secret&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Rely on OpenSSL for the initialization vector&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_iv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems the version of the Rails need to be update. So I changed Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;# gem 'rails', '5.0.0.1' =&amp;gt; '5.0.1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; to update the gems. The error will be gone.&lt;/p&gt;

&lt;p&gt;Some people said they sitll got the error after they change the Gemfile. It’s a better way to update Ruby version too. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25185&quot;&gt;refference is here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 15:49:44 +0900</pubDate>
        <link>https://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/11/30/rails-error-of-key-must-be-32-bytes</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>solution</category>
        
      </item>
    
      <item>
        <title>Insert Math into post with MathJax</title>
        <description>&lt;p&gt;Sometimes we may need to insert math equation into posts. &lt;a href=&quot;https://www.mathjax.org/#about&quot;&gt;MathJax&lt;/a&gt; can help us to do this. We can write LaTeX-like equations in posts with MathJax. And it’s also easy to config into Jekyll.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;add-script-tag-into-html-head&quot;&gt;Add script tag into HTML head.&lt;/h2&gt;

&lt;p&gt;Add the script below into every page (or add it into template page “default.html”):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This CDN has been retired, so I changed it to cdnjs.cloudflare.com:&lt;/p&gt;

  &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use-redcarpet-or-karmdown-as-markdown-compiler&quot;&gt;Use redcarpet or karmdown as Markdown compiler&lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Set it in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;markdwon: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kramdown&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or redcarpet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;use-latex-like-code&quot;&gt;Use LaTeX-like code&lt;/h2&gt;

&lt;p&gt;MathJax use &lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \\)&lt;/code&gt; for inline math and &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[ \\]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$$ $$&lt;/code&gt; for displayed math. For instance:&lt;/p&gt;

&lt;div class=&quot;language-latex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; E &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; mc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can get:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=mc^2&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\( \alpha\times\beta\times\gamma \\)&lt;/code&gt; can get \(\alpha\times\beta\times\gamma\)&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;Because some strange things will happen when you use default Markdown compiler. &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Nov 2017 19:50:32 +0900</pubDate>
        <link>https://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</link>
        <guid isPermaLink="true">https://simcookies.github.io/2017/11/23/insert-math-into-post-with-mathjax</guid>
        
        <category>jekyll</category>
        
        <category>latex</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
