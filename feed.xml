<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simcookies</title>
    <description>All about Simcookies Project.</description>
    <link>http://simcookies.github.io/</link>
    <atom:link href="http://simcookies.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 05 Oct 2016 18:00:14 +0900</pubDate>
    <lastBuildDate>Wed, 05 Oct 2016 18:00:14 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Fix Nvidia bug in Ubuntu 16.04</title>
        <description>&lt;p&gt;After I found a lot of problems with Windows 10, I installed Ubuntu 16.04 together with it. However when I finished installing it, I checked the lastest driver of Nvidia and replaced it from test to offical version, errors showed out: Driver “ebridge” was registered. So I searched online, also did as they said, but it still didn’t work. Finally, I just made a little change in it. Here is the way.&lt;/p&gt;

&lt;p&gt;Firstly, get into recovery-mode (4.4.0-21-generic), and enter to shell:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get purge nvidia*
sudo apt-get purge nvidia-settings
sudo apt-get purge nvidia-prime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Reboot, and enter Boot with new kernel version (4.4.0-23-generic). This is what they said. But I found it still showed up with the error message. So I tried to reboot and enter normal ubuntu, offcause I can not login GUI because it has not Driver, so I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+F1&lt;/code&gt; to get into login shell, input:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nvidia-current-updates
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, reboot again. OK~ It worked!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/09/27/fix-nviada-bug-ubuntu</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/09/27/fix-nviada-bug-ubuntu</guid>
        
        <category>Linux</category>
        
        <category>Ubuntu</category>
        
        
        <category>Solution</category>
        
      </item>
    
      <item>
        <title>Begin with Rails</title>
        <description>&lt;p&gt;For a new developer of Rails, it may be a quite problem to distinguish the concepts of Ruby, Rails, rvm, gem, bundle and rake. So I want post this blog to summarize them, also summarize the steps to install Rails 4 on Linux Ubuntu 16.04.&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;The name of programming language.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rails&lt;/td&gt;
      &lt;td&gt;The web develop framework mainly used ruby.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RVM&lt;/td&gt;
      &lt;td&gt;RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RubyGems&lt;/td&gt;
      &lt;td&gt;A package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries (in a self-contained format called a “gem”).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gem&lt;/td&gt;
      &lt;td&gt;A self-contained RubyGem format, you can use it directly as command-line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bundle&lt;/td&gt;
      &lt;td&gt;A kind of instance of gem, it provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed. It always binded with file named “Gemfile”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gemfile&lt;/td&gt;
      &lt;td&gt;Binded with bundle like &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rake&lt;/td&gt;
      &lt;td&gt;A simple ruby build program with capabilities similar to make.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rakefile&lt;/td&gt;
      &lt;td&gt;Rake’s version of Makefiles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;install-rails-4&quot;&gt;Install Rails 4&lt;/h2&gt;

&lt;h3 id=&quot;test-os&quot;&gt;Test OS&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux – Ubuntu 16.04&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;install-rvm&quot;&gt;Install RVM&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
~ $ \curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm -v&lt;/code&gt; to check version of RVM you installed. Like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm -v
rvm 1.27.0 (latest) by Wayne E. Seguin &amp;lt;wayneeseguin@gmail.com&amp;gt;, Michal Papis &amp;lt;mpapis@gmail.com&amp;gt; [https://rvm.io/]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-ruby-with-rvm&quot;&gt;Install Ruby with RVM&lt;/h3&gt;

&lt;p&gt;If you installed RVM successfully, you can use it to install RVM now. Firstly, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list known&lt;/code&gt; to list all versions you can install, and choose from them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm requirements # If without the step, it also included in next step.
~ $ rvm install 2.2.2 # Here you can decide which version by yourself.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here it may be take a bit long time because of downloading and complile. This installing also includes RubyGems. After it, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list&lt;/code&gt; to list all the versions you have installed. Like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm list

rvm rubies

 * ruby-2.2.2 [ x86_64 ]
 
 # =&amp;gt; - current
 # =* - current &amp;amp;&amp;amp; default
 #  * - default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use 2.2.2&lt;/code&gt; to set version of current ruby. And &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use 2.2.2 --default&lt;/code&gt; can set default version and you can use that version of ruby after openning console without setting version every time.&lt;/p&gt;

&lt;p&gt;However, when I installed rvm and use it firstly, it give me an error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rvm use 2.2.2 --default

RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for an example.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Why showed this error? Because when we install rvm, it will add RVM path and RVM loading line to ~/.profile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;amp;&amp;amp; source &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM into a shell session *as a function* 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But we the console which we openned is always non-login bash, it will not load the .profile. Here I give my solution:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Move the loading line to .bashrc file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we use non-login bash, it will load .bashrc, if we use login-bash, it will load .profile, and load .bashrc through:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# if running bash
if [ -n &quot;$BASH_VERSION&quot; ]; then
    # include .bashrc if it exists
    if [ -f &quot;$HOME/.bashrc&quot; ]; then
        . &quot;$HOME/.bashrc&quot;
    fi
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After this, I think it will be OK. Finally, use &lt;code class=&quot;highlighter-rouge&quot;&gt;gem -v&lt;/code&gt; to check version of Gemfile.&lt;/p&gt;

&lt;h3 id=&quot;install-bundler-and-rails-4&quot;&gt;Install Bundler and Rails 4&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundle&lt;/code&gt; to install bundler.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install rails --version=4.2.7.1&lt;/code&gt; Use &lt;code class=&quot;highlighter-rouge&quot;&gt;--version&lt;/code&gt; option to install specific rails.&lt;/p&gt;

&lt;h3 id=&quot;test-installing&quot;&gt;Test Installing&lt;/h3&gt;

&lt;p&gt;According the offical documentation &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new blog&lt;/code&gt; to make new rails project. But it will bundle install the lastest Rails and related gems automaticly, so we have to specify the version of rails which we want, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ rails _4.2.7.1_ new blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is quite important point, because the gems depend with each other. When I firstly rails new a project, I use &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new blog&lt;/code&gt; directly, and just it generates a file named Gemfile, I just modify the version of rails in it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4.2.7.1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Errors will be showed when we start server. So itt’s better to spectify version.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails server&lt;/code&gt; can start server at localhost:4000, you can input this address in browser and check the main page. Here we go with Rails 4!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;surmmary&quot;&gt;Surmmary&lt;/h2&gt;

&lt;p&gt;The versions of deferent parts and install order are very important, here I made a flow figure:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install RVM –&amp;gt; use RVM install Ruby and gem –&amp;gt; use gem install bundle and Rails –&amp;gt; make project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post was writed to help new rails developer with deeper understanding about so many concepts. Also it helps me not to forget the install process. After them, enjoy developing in Rails!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Offical RVM page: &lt;a href=&quot;https://rvm.io/&quot;&gt;https://rvm.io/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Chinese install guide book: &lt;a href=&quot;https://ruby-china.org/wiki/rvm-guide&quot;&gt;https://ruby-china.org/wiki/rvm-guide&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Offical Rails guide book: &lt;a href=&quot;http://guides.rubyonrails.org/&quot;&gt;http://guides.rubyonrails.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;How to solve the problem with “RVM is not a function”: &lt;a href=&quot;http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function&quot;&gt;http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/09/04/begin-wih-rails</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/09/04/begin-wih-rails</guid>
        
        <category>Rails</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Post blogs with Jekyll</title>
        <description>&lt;p&gt;Jekyll is a tool can transform plain text into static websites and blog. It’s a open source project on &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Github&lt;/a&gt;. In this blog, I will talk about how to install Jekyll and use it to generate our static blogs.&lt;/p&gt;

&lt;h2 id=&quot;install-jekyll&quot;&gt;Install jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll writed by Ruby, they pack up it as a gem, so we can use RubyGems to install it. Use command like these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
~ $ jekyll new your_site_dir
~ $ cd your_site_dir
~/your_site_dir $ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then check the localhost at port 4000 as inputing localhost:4000 at address column of browser. We will see the standard blog pages. Here we use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, it will build the project and make a server at port 4000, we can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build --destrination &amp;lt;destrination&amp;gt;&lt;/code&gt; to specify build path directly. Here you can repalce &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;destrination&amp;gt;&lt;/code&gt; to directory which you want to build. The default path is &lt;code class=&quot;highlighter-rouge&quot;&gt;./_site&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As time goes, the project will need another gems, so we can make a Gemfile to collect the gems together at root path. Here is context of Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3.2.1&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After making Gemfile, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; to install all gems we need, if we want to add some other gems, we can add into Gemfile, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; again.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;directory&quot;&gt;Directory&lt;/h2&gt;

&lt;p&gt;Because the website is static, we can modify it by CSS/HTML and JavaScript. Let’s check the directory firstly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;your_site_root_dir/
|-- README.md
|-- _config.yml
|-- Gemfile
|-- _include/
|   |-- head.html
|   |-- header.html
|   |-- footer.html
|-- _layouts/
|   |-- default.html
|   |-- page.html
|   |-- post.html
|-- _plugins/
|-- _posts/
|-- _sass/
|   |-- _base.scss
|   |-- _layout.scss
|   |-- _syntax-highlighting.scss
|-- about.md
|-- css/
|   |-- main.scss
|-- feed.xml
|-- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here I made a table to give detials about them:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File/Directory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;_config.yml&lt;/td&gt;
      &lt;td&gt;Stores configuration data. And it also can store global variables.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gemfile&lt;/td&gt;
      &lt;td&gt;I made it by myself (The lastest version Jekyll will make it for you)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_include&lt;/td&gt;
      &lt;td&gt;These are the partials that can be mixed and matched by layouts and posts to facilitate reuse.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_layouts&lt;/td&gt;
      &lt;td&gt;These are the templates that wrap posts.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_post&lt;/td&gt;
      &lt;td&gt;Our post with markdown format&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_site&lt;/td&gt;
      &lt;td&gt;The normal bulid directory, but I change it other place.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;index.html and other HTML, Markdown files&lt;/td&gt;
      &lt;td&gt;These will be build directly to the build root directory.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;other file or floder&lt;/td&gt;
      &lt;td&gt;These will also be build and included to root directory, such as css or script.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Almost all of configurations and global variables are stored in _config.yml. The format of configuration should be like &lt;code class=&quot;highlighter-rouge&quot;&gt;option: value&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;variable: value&lt;/code&gt;. For example, normally , we need config the site info, just do like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Site settings&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;description: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descripe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Social info if you want&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;twitter_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;github_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;facebook_username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facebook&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Markdown seetings&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;makrdown: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;redcarpet:
  extensions:
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you set variables in _config.yml, you can use them in HTML as Liquid Language. For instance:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ github_username }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will turned into real HTML context:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;your_github_username&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For more information about Liquid language, you can check &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll offical docs site&lt;/a&gt;.
The point is, whenever you modify the _config.yml, server needs to be restarted again or &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; needs to be rebuild.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;write-post&quot;&gt;Write Post&lt;/h2&gt;

&lt;p&gt;After some basic setting, you can write your own blog now. You can use any editor to write blog at the path of &lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;, at the same time, Jekyll server can keep watch over your post and refresh the web page. Here is the point you should be care about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The extension of post file should be &lt;code class=&quot;highlighter-rouge&quot;&gt;.markdown&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;(and so on, I use &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Post filename should be write like: &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-your-blog-name.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open one post, write below code at first of file:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Your&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2016-03-21 15:35:16 +0900&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Blog&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Go on write something you want after these code. These code are provided to Jekyll for explaining some info of post. Index page can use ttile variable to show posts order by date variable, and also we can sort out posts with category and tag variables. Well, you can find more information about how to use these varibale at &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;offical page&lt;/a&gt; or I will post new blog about it, you can subscribe it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;use-markdown&quot;&gt;Use Markdown&lt;/h2&gt;

&lt;p&gt;Why we use Jekyll to write blog is beacuse we do not need to focus on HTML pages every time, just concentrate on writting. And with Markdwon, this process will be more easy and happy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; is a lightweight markup language with plain text. We just write some text, and Markdown processers help us to translate it into beautiful HTML pages. Jekyll normally supports two markdown renderers: &lt;code class=&quot;highlighter-rouge&quot;&gt;Redcarpet&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Kramdown&lt;/code&gt;, even we can also make our own markdown processors. In my blog project, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Redcarpet&lt;/code&gt;. So I make configuration like here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Here are write at _config.yml&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;markdown: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;redcarpet:
  extensions:
      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fenced_code_blocks&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_intra_emphasis&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strikethrough&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autolink&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The extensions are used normally:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fenced_code_blocks&lt;/code&gt;: This will make it easy to write code.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;no_intra_emphasis&lt;/code&gt;: Do not parse emphasis inside of words. Strings such as &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_bar_baz&lt;/code&gt; will not generate &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strikethrough&lt;/code&gt;: Parse strikethrough, PHP-Markdown style. Two &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; characters mark the start of a strikethrough. Such as &lt;del&gt;Text&lt;/del&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autolink&lt;/code&gt;: Parse links even when they are not enclosed in &amp;lt;&amp;gt; characters. Autolinks for the http, https and ftp protocols will be automatically detected.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tables&lt;/code&gt;: Parse tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some basic syntax rules, please have a look at &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Github Guide&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Use the jekyll to make own blog, and then we can focus on writting blogs. If we want to chage the theme of blog, we can also check &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;here&lt;/a&gt;, fork their repository. Or we can make own themes, it’s a big challenge for skills of Front-End. OK, let’s enjoy blog now.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Jekyll offical docs site: &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;https://jekyllrb.com/docs/home/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Jekyll GitHub repository souce code: &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;https://github.com/jekyll/jekyll&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Markdown processer redcarpet: &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;https://github.com/vmg/redcarpet&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Jekyll theme offical site: &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 +0900</pubDate>
        <link>http://simcookies.github.io/2016/05/01/post-blogs-with-jekyll</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/05/01/post-blogs-with-jekyll</guid>
        
        <category>jekyll</category>
        
        <category>markdown</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Mar 2016 15:35:16 +0900</pubDate>
        <link>http://simcookies.github.io/2016/03/21/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://simcookies.github.io/2016/03/21/welcome-to-jekyll</guid>
        
        <category>jekyll</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
